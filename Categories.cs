///
 /// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 ///

namespace Codat.Categories;
using System.Net.Http;
using Newtonsoft.Json;
using Codat.Models.Shared;
using Codat.Models.Categories;
using Codat.Utils;

public interface ICategoriesSDK
{
    Task<GetAccountCategoryResponse> GetAccountCategoryAsync(GetAccountCategoryRequest request);
    Task<ListAccountsCategoriesResponse> ListAccountsCategoriesAsync(ListAccountsCategoriesRequest request);
    Task<ListAvailableAccountCategoriesResponse> ListAvailableAccountCategoriesAsync();
    Task<UpdateAccountCategoryResponse> UpdateAccountCategoryAsync(UpdateAccountCategoryRequest request);
    Task<UpdateAccountsCategoriesResponse> UpdateAccountsCategoriesAsync(UpdateAccountsCategoriesRequest request);
}

public class CategoriesSDK: ICategoriesSDK
{
    private const string language = "csharp";
    private const string sdkVersion = "0.0.1";
    private const string sdkGenVersion = "internal";
    public Uri ServerUrl { get { return _defaultClient.BaseAddress; } }
    private HttpClient _defaultClient;
    private HttpClient _securityClient;

    public CategoriesSDK(HttpClient defaultClient, HttpClient securityClient)
    {
        _defaultClient = defaultClient;
        _securityClient = securityClient;
    }

    public async Task<GetAccountCategoryResponse> GetAccountCategoryAsync(GetAccountCategoryRequest request)
    {
        var message = request.BuildHttpRequestMessage("get-account-category");
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetAccountCategoryResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if("application/json" == response.ContentType)
            {
                response.CategorisedAccount = JsonConvert.DeserializeObject<CategorisedAccount>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

    public async Task<ListAccountsCategoriesResponse> ListAccountsCategoriesAsync(ListAccountsCategoriesRequest request)
    {
        var message = request.BuildHttpRequestMessage("list-accounts-categories");
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new ListAccountsCategoriesResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if("application/json" == response.ContentType)
            {
                response.CategorisedAccounts = JsonConvert.DeserializeObject<CategorisedAccounts>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

    public async Task<ListAvailableAccountCategoriesResponse> ListAvailableAccountCategoriesAsync()
    {
        var message = new HttpRequestMessage(HttpMethod.Get, "/data/assess/accounts/categories");
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new ListAvailableAccountCategoriesResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if("application/json" == response.ContentType)
            {
                response.Categories = JsonConvert.DeserializeObject<IEnumerable<Categories>>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

    public async Task<UpdateAccountCategoryResponse> UpdateAccountCategoryAsync(UpdateAccountCategoryRequest request)
    {
        var message = request.BuildHttpRequestMessage("update-account-category");
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new UpdateAccountCategoryResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if("application/json" == response.ContentType)
            {
                response.CategorisedAccount = JsonConvert.DeserializeObject<CategorisedAccount>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

    public async Task<UpdateAccountsCategoriesResponse> UpdateAccountsCategoriesAsync(UpdateAccountsCategoriesRequest request)
    {
        var message = request.BuildHttpRequestMessage("update-accounts-categories");
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new UpdateAccountsCategoriesResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if("application/json" == response.ContentType)
            {
                response.CategorisedAccounts = JsonConvert.DeserializeObject<IEnumerable<CategorisedAccount>>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

    
}