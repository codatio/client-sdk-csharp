///
 /// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 ///

namespace Codat.ExcelReports;
using System.Net.Http;
using Newtonsoft.Json;
using Codat.Models.Shared;
using Codat.Models.ExcelReports;
using Codat.Utils;

public interface IExcelReportsSDK
{
    Task<DownloadExcelReportResponse> DownloadExcelReportAsync(DownloadExcelReportRequest request);
    Task<GenerateExcelReportResponse> GenerateExcelReportAsync(GenerateExcelReportRequest request);
    Task<GetAccountingMarketingMetricsResponse> GetAccountingMarketingMetricsAsync(GetAccountingMarketingMetricsRequest request);
    Task<GetExcelReportResponse> GetExcelReportAsync(GetExcelReportRequest request);
    Task<GetExcelReportGenerationStatusResponse> GetExcelReportGenerationStatusAsync(GetExcelReportGenerationStatusRequest request);
}

public class ExcelReportsSDK: IExcelReportsSDK
{
    private const string language = "csharp";
    private const string sdkVersion = "0.0.1";
    private const string sdkGenVersion = "internal";
    public Uri ServerUrl { get { return _defaultClient.BaseAddress; } }
    private HttpClient _defaultClient;
    private HttpClient _securityClient;

    public ExcelReportsSDK(HttpClient defaultClient, HttpClient securityClient)
    {
        _defaultClient = defaultClient;
        _securityClient = securityClient;
    }

    public async Task<DownloadExcelReportResponse> DownloadExcelReportAsync(DownloadExcelReportRequest request)
    {
        var message = request.BuildHttpRequestMessage("download-excel-report");
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new DownloadExcelReportResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if("application/octet-stream" == response.ContentType)
            {
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    public async Task<GenerateExcelReportResponse> GenerateExcelReportAsync(GenerateExcelReportRequest request)
    {
        var message = request.BuildHttpRequestMessage("generate-excel-report");
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GenerateExcelReportResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if("application/json" == response.ContentType)
            {
                response.ExcelStatus = JsonConvert.DeserializeObject<ExcelStatus>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

    public async Task<GetAccountingMarketingMetricsResponse> GetAccountingMarketingMetricsAsync(GetAccountingMarketingMetricsRequest request)
    {
        var message = request.BuildHttpRequestMessage("get-accounting-marketing-metrics");
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetAccountingMarketingMetricsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if("application/json" == response.ContentType)
            {
                response.Report = JsonConvert.DeserializeObject<Report>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

    public async Task<GetExcelReportResponse> GetExcelReportAsync(GetExcelReportRequest request)
    {
        var message = request.BuildHttpRequestMessage("get-excel-report");
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetExcelReportResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if("application/octet-stream" == response.ContentType)
            {
                throw new NotImplementedException();
            }
            return response;
        }
        return response;
    }

    public async Task<GetExcelReportGenerationStatusResponse> GetExcelReportGenerationStatusAsync(GetExcelReportGenerationStatusRequest request)
    {
        var message = request.BuildHttpRequestMessage("get-excel-report-generation-status");
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetExcelReportGenerationStatusResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if("application/json" == response.ContentType)
            {
                response.ExcelStatus = JsonConvert.DeserializeObject<ExcelStatus>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

    
}