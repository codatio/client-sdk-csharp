///
 /// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 ///

namespace Codat.Models.Categories;
using Codat.Utils;
using Codat.Models.Shared;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Net;
using System.Net.Http;
using System.Text;

public class ListAccountsCategoriesRequest
{
    [JsonProperty("companyId")]
    public string CompanyId { get; set; }
    
    [JsonProperty("connectionId")]
    public string ConnectionId { get; set; }
    
    [JsonProperty("orderBy")]
    public string? OrderBy { get; set; }
    
    [JsonProperty("page")]
    public int Page { get; set; }
    
    [JsonProperty("pageSize")]
    public int? PageSize { get; set; }
    
    [JsonProperty("query")]
    public string? Query { get; set; }
    
    internal HttpRequestMessage BuildHttpRequestMessage(string operationId)
    {
        if("list-accounts-categories" == operationId)
        {
            // serialize query parameters
            var queryParams = new List<string>();
            queryParams.Add(QueryParamSerializer.Serialize("simple",false, "companyId", "", this.CompanyId));
            queryParams.Add(QueryParamSerializer.Serialize("simple",false, "connectionId", "", this.ConnectionId));
            queryParams.Add(QueryParamSerializer.Serialize("form",true, "orderBy", "", this.OrderBy));
            queryParams.Add(QueryParamSerializer.Serialize("form",true, "page", "", this.Page));
            queryParams.Add(QueryParamSerializer.Serialize("form",true, "pageSize", "", this.PageSize));
            queryParams.Add(QueryParamSerializer.Serialize("form",true, "query", "", this.Query));

            var queryParamString = $"?{String.Join("&", queryParams)}";
            // add path params
            
            var companyId = PathParamSerializer.Serialize("simple", false, this.CompanyId);
            
            var connectionId = PathParamSerializer.Serialize("simple", false, this.ConnectionId);
            
            
            
            
            var message = new HttpRequestMessage(HttpMethod.Get, $"/data/companies/{companyId}/connections/{connectionId}/assess/accounts/categories" + queryParamString);
            return message;
        }
        throw new ArgumentException($"Attempt to build HttpRequestMessage for invalid operationId [{operationId}] for request type [ListAccountsCategoriesRequest]");
    }
}
