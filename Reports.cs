///
 /// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 ///

namespace Codat.Reports;
using System.Net.Http;
using Newtonsoft.Json;
using Codat.Models.Shared;
using Codat.Models.Reports;
using Codat.Utils;

public interface IReportsSDK
{
    Task<GetAccountsForEnhancedBalanceSheetResponse> GetAccountsForEnhancedBalanceSheetAsync(GetAccountsForEnhancedBalanceSheetRequest request);
    Task<GetAccountsForEnhancedProfitAndLossResponse> GetAccountsForEnhancedProfitAndLossAsync(GetAccountsForEnhancedProfitAndLossRequest request);
    Task<GetCommerceCustomerRetentionMetricsResponse> GetCommerceCustomerRetentionMetricsAsync(GetCommerceCustomerRetentionMetricsRequest request);
    Task<GetCommerceLifetimeValueMetricsResponse> GetCommerceLifetimeValueMetricsAsync(GetCommerceLifetimeValueMetricsRequest request);
    Task<GetCommerceOrdersMetricsResponse> GetCommerceOrdersMetricsAsync(GetCommerceOrdersMetricsRequest request);
    Task<GetCommerceRefundsMetricsResponse> GetCommerceRefundsMetricsAsync(GetCommerceRefundsMetricsRequest request);
    Task<GetCommerceRevenueMetricsResponse> GetCommerceRevenueMetricsAsync(GetCommerceRevenueMetricsRequest request);
    Task<GetEnhancedBalanceSheetResponse> GetEnhancedBalanceSheetAsync(GetEnhancedBalanceSheetRequest request);
    Task<GetEnhancedCashFlowTransactionsResponse> GetEnhancedCashFlowTransactionsAsync(GetEnhancedCashFlowTransactionsRequest request);
    Task<GetEnhancedFinancialMetricsResponse> GetEnhancedFinancialMetricsAsync(GetEnhancedFinancialMetricsRequest request);
    Task<GetEnhancedInvoicesReportResponse> GetEnhancedInvoicesReportAsync(GetEnhancedInvoicesReportRequest request);
    Task<GetEnhancedProfitAndLossResponse> GetEnhancedProfitAndLossAsync(GetEnhancedProfitAndLossRequest request);
    Task<GetRecurringRevenueMetricsResponse> GetRecurringRevenueMetricsAsync(GetRecurringRevenueMetricsRequest request);
    Task<RequestRecurringRevenueMetricsResponse> RequestRecurringRevenueMetricsAsync(RequestRecurringRevenueMetricsRequest request);
}

public class ReportsSDK: IReportsSDK
{
    private const string language = "csharp";
    private const string sdkVersion = "0.0.1";
    private const string sdkGenVersion = "internal";
    public Uri ServerUrl { get { return _defaultClient.BaseAddress; } }
    private HttpClient _defaultClient;
    private HttpClient _securityClient;

    public ReportsSDK(HttpClient defaultClient, HttpClient securityClient)
    {
        _defaultClient = defaultClient;
        _securityClient = securityClient;
    }

    public async Task<GetAccountsForEnhancedBalanceSheetResponse> GetAccountsForEnhancedBalanceSheetAsync(GetAccountsForEnhancedBalanceSheetRequest request)
    {
        var message = request.BuildHttpRequestMessage("get-accounts-for-enhanced-balance-sheet");
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetAccountsForEnhancedBalanceSheetResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if("application/json" == response.ContentType)
            {
                response.EnhancedReport = JsonConvert.DeserializeObject<EnhancedReport>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

    public async Task<GetAccountsForEnhancedProfitAndLossResponse> GetAccountsForEnhancedProfitAndLossAsync(GetAccountsForEnhancedProfitAndLossRequest request)
    {
        var message = request.BuildHttpRequestMessage("get-accounts-for-enhanced-profit-and-loss");
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetAccountsForEnhancedProfitAndLossResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if("application/json" == response.ContentType)
            {
                response.EnhancedReport = JsonConvert.DeserializeObject<EnhancedReport>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

    public async Task<GetCommerceCustomerRetentionMetricsResponse> GetCommerceCustomerRetentionMetricsAsync(GetCommerceCustomerRetentionMetricsRequest request)
    {
        var message = request.BuildHttpRequestMessage("get-commerce-customer-retention-metrics");
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetCommerceCustomerRetentionMetricsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if("application/json" == response.ContentType)
            {
                response.Report = JsonConvert.DeserializeObject<Report>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

    public async Task<GetCommerceLifetimeValueMetricsResponse> GetCommerceLifetimeValueMetricsAsync(GetCommerceLifetimeValueMetricsRequest request)
    {
        var message = request.BuildHttpRequestMessage("get-commerce-lifetime-value-metrics");
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetCommerceLifetimeValueMetricsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if("application/json" == response.ContentType)
            {
                response.Report = JsonConvert.DeserializeObject<Report>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

    public async Task<GetCommerceOrdersMetricsResponse> GetCommerceOrdersMetricsAsync(GetCommerceOrdersMetricsRequest request)
    {
        var message = request.BuildHttpRequestMessage("get-commerce-orders-metrics");
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetCommerceOrdersMetricsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if("application/json" == response.ContentType)
            {
                response.Report = JsonConvert.DeserializeObject<Report>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

    public async Task<GetCommerceRefundsMetricsResponse> GetCommerceRefundsMetricsAsync(GetCommerceRefundsMetricsRequest request)
    {
        var message = request.BuildHttpRequestMessage("get-commerce-refunds-metrics");
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetCommerceRefundsMetricsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if("application/json" == response.ContentType)
            {
                response.Report = JsonConvert.DeserializeObject<Report>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

    public async Task<GetCommerceRevenueMetricsResponse> GetCommerceRevenueMetricsAsync(GetCommerceRevenueMetricsRequest request)
    {
        var message = request.BuildHttpRequestMessage("get-commerce-revenue-metrics");
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetCommerceRevenueMetricsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if("application/json" == response.ContentType)
            {
                response.Report = JsonConvert.DeserializeObject<Report>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

    public async Task<GetEnhancedBalanceSheetResponse> GetEnhancedBalanceSheetAsync(GetEnhancedBalanceSheetRequest request)
    {
        var message = request.BuildHttpRequestMessage("get-enhanced-balance-sheet");
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetEnhancedBalanceSheetResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if("application/json" == response.ContentType)
            {
                response.Report = JsonConvert.DeserializeObject<Report>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

    public async Task<GetEnhancedCashFlowTransactionsResponse> GetEnhancedCashFlowTransactionsAsync(GetEnhancedCashFlowTransactionsRequest request)
    {
        var message = request.BuildHttpRequestMessage("get-enhanced-cash-flow-transactions");
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetEnhancedCashFlowTransactionsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if("application/json" == response.ContentType)
            {
                response.EnhancedCashFlowTransactions = JsonConvert.DeserializeObject<EnhancedCashFlowTransactions>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

    public async Task<GetEnhancedFinancialMetricsResponse> GetEnhancedFinancialMetricsAsync(GetEnhancedFinancialMetricsRequest request)
    {
        var message = request.BuildHttpRequestMessage("get-enhanced-financial-metrics");
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetEnhancedFinancialMetricsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if("application/json" == response.ContentType)
            {
                response.FinancialMetrics = JsonConvert.DeserializeObject<FinancialMetrics>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

    public async Task<GetEnhancedInvoicesReportResponse> GetEnhancedInvoicesReportAsync(GetEnhancedInvoicesReportRequest request)
    {
        var message = request.BuildHttpRequestMessage("get-enhanced-invoices-report");
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetEnhancedInvoicesReportResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if("application/json" == response.ContentType)
            {
                response.EnhancedInvoicesReport = JsonConvert.DeserializeObject<EnhancedInvoicesReport>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

    public async Task<GetEnhancedProfitAndLossResponse> GetEnhancedProfitAndLossAsync(GetEnhancedProfitAndLossRequest request)
    {
        var message = request.BuildHttpRequestMessage("get-enhanced-profit-and-loss");
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetEnhancedProfitAndLossResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if("application/json" == response.ContentType)
            {
                response.Report = JsonConvert.DeserializeObject<Report>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

    public async Task<GetRecurringRevenueMetricsResponse> GetRecurringRevenueMetricsAsync(GetRecurringRevenueMetricsRequest request)
    {
        var message = request.BuildHttpRequestMessage("get-recurring-revenue-metrics");
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new GetRecurringRevenueMetricsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if("application/json" == response.ContentType)
            {
                response.Report = JsonConvert.DeserializeObject<Report>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

    public async Task<RequestRecurringRevenueMetricsResponse> RequestRecurringRevenueMetricsAsync(RequestRecurringRevenueMetricsRequest request)
    {
        var message = request.BuildHttpRequestMessage("request-recurring-revenue-metrics");
        var httpResponseMessage = await _defaultClient.SendAsync(message);
        var response = new RequestRecurringRevenueMetricsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if("application/json" == response.ContentType)
            {
                response.Report = JsonConvert.DeserializeObject<Report>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

    
}