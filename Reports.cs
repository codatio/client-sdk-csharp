
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Codat.Reports
{
    using System;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;
    using System.Text;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Codat.Models.Shared;
    using Codat.Models.Reports;
    using Codat.Utils;

    public interface IReportsSDK
    {
        Task<GetAccountsForEnhancedBalanceSheetResponse> GetAccountsForEnhancedBalanceSheetAsync(GetAccountsForEnhancedBalanceSheetRequest request);
        Task<GetAccountsForEnhancedProfitAndLossResponse> GetAccountsForEnhancedProfitAndLossAsync(GetAccountsForEnhancedProfitAndLossRequest request);
        Task<GetCommerceCustomerRetentionMetricsResponse> GetCommerceCustomerRetentionMetricsAsync(GetCommerceCustomerRetentionMetricsRequest request);
        Task<GetCommerceLifetimeValueMetricsResponse> GetCommerceLifetimeValueMetricsAsync(GetCommerceLifetimeValueMetricsRequest request);
        Task<GetCommerceOrdersMetricsResponse> GetCommerceOrdersMetricsAsync(GetCommerceOrdersMetricsRequest request);
        Task<GetCommerceRefundsMetricsResponse> GetCommerceRefundsMetricsAsync(GetCommerceRefundsMetricsRequest request);
        Task<GetCommerceRevenueMetricsResponse> GetCommerceRevenueMetricsAsync(GetCommerceRevenueMetricsRequest request);
        Task<GetEnhancedBalanceSheetResponse> GetEnhancedBalanceSheetAsync(GetEnhancedBalanceSheetRequest request);
        Task<GetEnhancedCashFlowTransactionsResponse> GetEnhancedCashFlowTransactionsAsync(GetEnhancedCashFlowTransactionsRequest request);
        Task<GetEnhancedFinancialMetricsResponse> GetEnhancedFinancialMetricsAsync(GetEnhancedFinancialMetricsRequest request);
        Task<GetEnhancedInvoicesReportResponse> GetEnhancedInvoicesReportAsync(GetEnhancedInvoicesReportRequest request);
        Task<GetEnhancedProfitAndLossResponse> GetEnhancedProfitAndLossAsync(GetEnhancedProfitAndLossRequest request);
        Task<GetRecurringRevenueMetricsResponse> GetRecurringRevenueMetricsAsync(GetRecurringRevenueMetricsRequest request);
        Task<RequestRecurringRevenueMetricsResponse> RequestRecurringRevenueMetricsAsync(RequestRecurringRevenueMetricsRequest request);
    }

    public class ReportsSDK: IReportsSDK
    {

        private const string language = "csharp";
        private const string sdkVersion = "0.0.1";
        private const string sdkGenVersion = "internal";
        public Uri ServerUrl { get { return _defaultClient.BaseAddress; } }
        private HttpClient _defaultClient;
        private HttpClient _securityClient;

        public ReportsSDK(HttpClient defaultClient, HttpClient securityClient)
        {
            _defaultClient = defaultClient;
            _securityClient = securityClient;
        }

        
    public async Task<GetAccountsForEnhancedBalanceSheetResponse> GetAccountsForEnhancedBalanceSheetAsync(GetAccountsForEnhancedBalanceSheetRequest request)
    {
        string baseUrl = "";
        var message = GetAccountsForEnhancedBalanceSheetRequest.BuildHttpRequestMessage("get-accounts-for-enhanced-balance-sheet", request, baseUrl);
        var client = _securityClient;

        var httpResponseMessage = await client.SendAsync(message);
        var response = new GetAccountsForEnhancedBalanceSheetResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.EnhancedReport = JsonConvert.DeserializeObject<EnhancedReport>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401) || (response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Schema = JsonConvert.DeserializeObject<Schema>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    public async Task<GetAccountsForEnhancedProfitAndLossResponse> GetAccountsForEnhancedProfitAndLossAsync(GetAccountsForEnhancedProfitAndLossRequest request)
    {
        string baseUrl = "";
        var message = GetAccountsForEnhancedProfitAndLossRequest.BuildHttpRequestMessage("get-accounts-for-enhanced-profit-and-loss", request, baseUrl);
        var client = _securityClient;

        var httpResponseMessage = await client.SendAsync(message);
        var response = new GetAccountsForEnhancedProfitAndLossResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.EnhancedReport = JsonConvert.DeserializeObject<EnhancedReport>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401) || (response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Schema = JsonConvert.DeserializeObject<Schema>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    public async Task<GetCommerceCustomerRetentionMetricsResponse> GetCommerceCustomerRetentionMetricsAsync(GetCommerceCustomerRetentionMetricsRequest request)
    {
        string baseUrl = "";
        var message = GetCommerceCustomerRetentionMetricsRequest.BuildHttpRequestMessage("get-commerce-customer-retention-metrics", request, baseUrl);
        var client = _securityClient;

        var httpResponseMessage = await client.SendAsync(message);
        var response = new GetCommerceCustomerRetentionMetricsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Report = JsonConvert.DeserializeObject<Report>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401) || (response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Schema = JsonConvert.DeserializeObject<Schema>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    public async Task<GetCommerceLifetimeValueMetricsResponse> GetCommerceLifetimeValueMetricsAsync(GetCommerceLifetimeValueMetricsRequest request)
    {
        string baseUrl = "";
        var message = GetCommerceLifetimeValueMetricsRequest.BuildHttpRequestMessage("get-commerce-lifetime-value-metrics", request, baseUrl);
        var client = _securityClient;

        var httpResponseMessage = await client.SendAsync(message);
        var response = new GetCommerceLifetimeValueMetricsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Report = JsonConvert.DeserializeObject<Report>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401) || (response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Schema = JsonConvert.DeserializeObject<Schema>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    public async Task<GetCommerceOrdersMetricsResponse> GetCommerceOrdersMetricsAsync(GetCommerceOrdersMetricsRequest request)
    {
        string baseUrl = "";
        var message = GetCommerceOrdersMetricsRequest.BuildHttpRequestMessage("get-commerce-orders-metrics", request, baseUrl);
        var client = _securityClient;

        var httpResponseMessage = await client.SendAsync(message);
        var response = new GetCommerceOrdersMetricsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Report = JsonConvert.DeserializeObject<Report>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401) || (response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Schema = JsonConvert.DeserializeObject<Schema>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    public async Task<GetCommerceRefundsMetricsResponse> GetCommerceRefundsMetricsAsync(GetCommerceRefundsMetricsRequest request)
    {
        string baseUrl = "";
        var message = GetCommerceRefundsMetricsRequest.BuildHttpRequestMessage("get-commerce-refunds-metrics", request, baseUrl);
        var client = _securityClient;

        var httpResponseMessage = await client.SendAsync(message);
        var response = new GetCommerceRefundsMetricsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Report = JsonConvert.DeserializeObject<Report>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401) || (response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Schema = JsonConvert.DeserializeObject<Schema>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    public async Task<GetCommerceRevenueMetricsResponse> GetCommerceRevenueMetricsAsync(GetCommerceRevenueMetricsRequest request)
    {
        string baseUrl = "";
        var message = GetCommerceRevenueMetricsRequest.BuildHttpRequestMessage("get-commerce-revenue-metrics", request, baseUrl);
        var client = _securityClient;

        var httpResponseMessage = await client.SendAsync(message);
        var response = new GetCommerceRevenueMetricsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Report = JsonConvert.DeserializeObject<Report>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401) || (response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Schema = JsonConvert.DeserializeObject<Schema>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    public async Task<GetEnhancedBalanceSheetResponse> GetEnhancedBalanceSheetAsync(GetEnhancedBalanceSheetRequest request)
    {
        string baseUrl = "";
        var message = GetEnhancedBalanceSheetRequest.BuildHttpRequestMessage("get-enhanced-balance-sheet", request, baseUrl);
        var client = _securityClient;

        var httpResponseMessage = await client.SendAsync(message);
        var response = new GetEnhancedBalanceSheetResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Report = JsonConvert.DeserializeObject<Report>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401) || (response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Schema = JsonConvert.DeserializeObject<Schema>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    public async Task<GetEnhancedCashFlowTransactionsResponse> GetEnhancedCashFlowTransactionsAsync(GetEnhancedCashFlowTransactionsRequest request)
    {
        string baseUrl = "";
        var message = GetEnhancedCashFlowTransactionsRequest.BuildHttpRequestMessage("get-enhanced-cash-flow-transactions", request, baseUrl);
        var client = _securityClient;

        var httpResponseMessage = await client.SendAsync(message);
        var response = new GetEnhancedCashFlowTransactionsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.EnhancedCashFlowTransactions = JsonConvert.DeserializeObject<EnhancedCashFlowTransactions>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401) || (response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Schema = JsonConvert.DeserializeObject<Schema>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    public async Task<GetEnhancedFinancialMetricsResponse> GetEnhancedFinancialMetricsAsync(GetEnhancedFinancialMetricsRequest request)
    {
        string baseUrl = "";
        var message = GetEnhancedFinancialMetricsRequest.BuildHttpRequestMessage("get-enhanced-financial-metrics", request, baseUrl);
        var client = _securityClient;

        var httpResponseMessage = await client.SendAsync(message);
        var response = new GetEnhancedFinancialMetricsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.FinancialMetrics = JsonConvert.DeserializeObject<FinancialMetrics>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    public async Task<GetEnhancedInvoicesReportResponse> GetEnhancedInvoicesReportAsync(GetEnhancedInvoicesReportRequest request)
    {
        string baseUrl = "";
        var message = GetEnhancedInvoicesReportRequest.BuildHttpRequestMessage("get-enhanced-invoices-report", request, baseUrl);
        var client = _securityClient;

        var httpResponseMessage = await client.SendAsync(message);
        var response = new GetEnhancedInvoicesReportResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.EnhancedInvoicesReport = JsonConvert.DeserializeObject<EnhancedInvoicesReport>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401) || (response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Schema = JsonConvert.DeserializeObject<Schema>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    public async Task<GetEnhancedProfitAndLossResponse> GetEnhancedProfitAndLossAsync(GetEnhancedProfitAndLossRequest request)
    {
        string baseUrl = "";
        var message = GetEnhancedProfitAndLossRequest.BuildHttpRequestMessage("get-enhanced-profit-and-loss", request, baseUrl);
        var client = _securityClient;

        var httpResponseMessage = await client.SendAsync(message);
        var response = new GetEnhancedProfitAndLossResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Report = JsonConvert.DeserializeObject<Report>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401) || (response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Schema = JsonConvert.DeserializeObject<Schema>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    public async Task<GetRecurringRevenueMetricsResponse> GetRecurringRevenueMetricsAsync(GetRecurringRevenueMetricsRequest request)
    {
        string baseUrl = "";
        var message = GetRecurringRevenueMetricsRequest.BuildHttpRequestMessage("get-recurring-revenue-metrics", request, baseUrl);
        var client = _securityClient;

        var httpResponseMessage = await client.SendAsync(message);
        var response = new GetRecurringRevenueMetricsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Report = JsonConvert.DeserializeObject<Report>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401) || (response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Schema = JsonConvert.DeserializeObject<Schema>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    public async Task<RequestRecurringRevenueMetricsResponse> RequestRecurringRevenueMetricsAsync(RequestRecurringRevenueMetricsRequest request)
    {
        string baseUrl = "";
        var message = RequestRecurringRevenueMetricsRequest.BuildHttpRequestMessage("request-recurring-revenue-metrics", request, baseUrl);
        var client = _securityClient;

        var httpResponseMessage = await client.SendAsync(message);
        var response = new RequestRecurringRevenueMetricsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Report = JsonConvert.DeserializeObject<Report>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401) || (response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Schema = JsonConvert.DeserializeObject<Schema>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    }
}