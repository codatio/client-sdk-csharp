///
 /// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 ///

namespace Codat.Utils;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using Newtonsoft.Json;

public class Utilities
{
    public static bool IsDictionary(object obj) =>
        obj != null && obj.GetType().GetInterface(typeof(IDictionary<,>).Name) != null;

    public static bool IsList(object obj) =>
        (!Utilities.IsDictionary(obj) && !Utilities.IsString(obj) && obj.GetType().GetInterface(typeof(IEnumerable<>).Name) != null);

    public static bool IsString(object obj) =>
        obj != null && obj.GetType().IsAssignableTo(typeof(string));

    public static bool IsPrimitive(object obj) =>
        obj != null && obj.GetType().IsPrimitive;

    public static bool IsEnum(object obj) =>
        obj != null && obj.GetType().IsEnum;

    public static bool IsDate(object obj) =>
        obj != null && (obj.GetType() == typeof(DateTime) || obj.GetType() == typeof(DateOnly));

    private static string StripSurroundingQuotes(string input)
    {
        Regex surroundingQuotesRegex = new Regex("^\"(.*)\"$");
        var match = surroundingQuotesRegex.Match(input);
        if(match.Groups.Values.Count() == 2)
        {
            return match.Groups.Values.Last().ToString();
        }
        return input;
    }

    public static string ToString(object obj)
    {
        if(obj == null)
        {
            return "null";
        }

        if(IsString(obj))
        {
            return obj.ToString();
        }

        if(IsPrimitive(obj))
        {
            return JsonConvert.SerializeObject(obj);
        }

        if(IsEnum(obj))
        {
             return StripSurroundingQuotes(obj.GetType().GetMember(obj.ToString()).First().CustomAttributes.First().ConstructorArguments.First().ToString());
        }

        if(IsDate(obj))
        {
            return StripSurroundingQuotes(JsonConvert.SerializeObject(obj, Formatting.None, new IsoDateTimeSerializer()));
        }
        return JsonConvert.SerializeObject(obj, Formatting.None, new IsoDateTimeSerializer());
    }
}