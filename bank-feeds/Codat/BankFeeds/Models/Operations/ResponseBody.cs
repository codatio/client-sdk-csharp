//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Codat.BankFeeds.Models.Operations
{
    using Codat.BankFeeds.Models.Shared;
    using Codat.BankFeeds.Utils;
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    using System;
    

    public class ResponseBodyType
    {
        private ResponseBodyType(string value) { Value = value; }

        public string Value { get; private set; }
        public static ResponseBodyType SourceAccountV2BatchCreateResponse { get { return new ResponseBodyType("SourceAccountV2BatchCreateResponse"); } }
        
        public static ResponseBodyType SourceAccountBatchCreateResponse { get { return new ResponseBodyType("SourceAccountBatchCreateResponse"); } }
        
        public static ResponseBodyType Null { get { return new ResponseBodyType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(ResponseBodyType v) { return v.Value; }
        public static ResponseBodyType FromString(string v) {
            switch(v) {
                case "SourceAccountV2BatchCreateResponse": return SourceAccountV2BatchCreateResponse;
                case "SourceAccountBatchCreateResponse": return SourceAccountBatchCreateResponse;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for ResponseBodyType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((ResponseBodyType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(ResponseBody.ResponseBodyConverter))]
    public class ResponseBody {
        public ResponseBody(ResponseBodyType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public SourceAccountV2BatchCreateResponse? SourceAccountV2BatchCreateResponse { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public SourceAccountBatchCreateResponse? SourceAccountBatchCreateResponse { get; set; }

        public ResponseBodyType Type { get; set; }


        public static ResponseBody CreateSourceAccountV2BatchCreateResponse(SourceAccountV2BatchCreateResponse sourceAccountV2BatchCreateResponse) {
            ResponseBodyType typ = ResponseBodyType.SourceAccountV2BatchCreateResponse;

            ResponseBody res = new ResponseBody(typ);
            res.SourceAccountV2BatchCreateResponse = sourceAccountV2BatchCreateResponse;
            return res;
        }

        public static ResponseBody CreateSourceAccountBatchCreateResponse(SourceAccountBatchCreateResponse sourceAccountBatchCreateResponse) {
            ResponseBodyType typ = ResponseBodyType.SourceAccountBatchCreateResponse;

            ResponseBody res = new ResponseBody(typ);
            res.SourceAccountBatchCreateResponse = sourceAccountBatchCreateResponse;
            return res;
        }

        public static ResponseBody CreateNull() {
            ResponseBodyType typ = ResponseBodyType.Null;
            return new ResponseBody(typ);
        }

        public class ResponseBodyConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(ResponseBody);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new ResponseBody(ResponseBodyType.SourceAccountV2BatchCreateResponse)
                    {
                        SourceAccountV2BatchCreateResponse = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<SourceAccountV2BatchCreateResponse>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(SourceAccountV2BatchCreateResponse), new ResponseBody(ResponseBodyType.SourceAccountV2BatchCreateResponse), "SourceAccountV2BatchCreateResponse"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new ResponseBody(ResponseBodyType.SourceAccountBatchCreateResponse)
                    {
                        SourceAccountBatchCreateResponse = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<SourceAccountBatchCreateResponse>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(SourceAccountBatchCreateResponse), new ResponseBody(ResponseBodyType.SourceAccountBatchCreateResponse), "SourceAccountBatchCreateResponse"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                ResponseBody res = (ResponseBody)value;
                if (ResponseBodyType.FromString(res.Type).Equals(ResponseBodyType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.SourceAccountV2BatchCreateResponse != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.SourceAccountV2BatchCreateResponse));
                    return;
                }
                if (res.SourceAccountBatchCreateResponse != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.SourceAccountBatchCreateResponse));
                    return;
                }

            }

        }

    }
}