//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Codat.BankFeeds.Models.Shared
{
    using Codat.BankFeeds.Utils;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    
    /// <summary>
    /// Represents the status of a managed bank feed sync.
    /// </summary>
    public class SyncStatusResult
    {

        /// <summary>
        /// The unique identifier for the sync.
        /// </summary>
        [JsonProperty("syncId")]
        public string SyncId { get; set; } = default!;

        /// <summary>
        /// The ID of the client associated with the company that owns the source bank account.
        /// </summary>
        [JsonProperty("clientId")]
        public string ClientId { get; set; } = default!;

        /// <summary>
        /// The ID of the company that owns the source bank account.
        /// </summary>
        [JsonProperty("companyId")]
        public string CompanyId { get; set; } = default!;

        /// <summary>
        /// The name of the company that owns the source bank account.
        /// </summary>
        [JsonProperty("companyName")]
        public string CompanyName { get; set; } = default!;

        /// <summary>
        /// The ID of the target accounting data connection.
        /// </summary>
        [JsonProperty("dataConnectionId")]
        public string DataConnectionId { get; set; } = default!;

        /// <summary>
        /// The ID of the source bank account from which transactions are fetched.
        /// </summary>
        [JsonProperty("sourceAccountId")]
        public string SourceAccountId { get; set; } = default!;

        /// <summary>
        /// The start of the sync period.
        /// </summary>
        [JsonProperty("periodStartUtc")]
        public DateTime PeriodStartUtc { get; set; } = default!;

        /// <summary>
        /// The end of the sync period.
        /// </summary>
        [JsonProperty("periodEndUtc")]
        public DateTime PeriodEndUtc { get; set; } = default!;

        /// <summary>
        /// The UTC timestamp when the sync started executing.
        /// </summary>
        [JsonProperty("executionStartUtc")]
        public DateTime ExecutionStartUtc { get; set; } = default!;

        /// <summary>
        /// The current status of the sync. Known values are `Started`, `Failed`, `SuccessDataPushed`, `SuccessNoDataPushed`, `PartialSuccessDataPushed`.
        /// </summary>
        [JsonProperty("status")]
        public string Status { get; set; } = default!;

        /// <summary>
        /// The UTC timestamp when the sync execution ended, if completed (i.e. `status` is any value other than `Started`).
        /// </summary>
        [JsonProperty("executionEndUtc")]
        public DateTime? ExecutionEndUtc { get; set; } = null;

        /// <summary>
        /// Error message if the sync failed.
        /// </summary>
        [JsonProperty("errorMessage")]
        public string? ErrorMessage { get; set; } = null;

        /// <summary>
        /// Error code if the sync failed.
        /// </summary>
        [JsonProperty("errorCode")]
        public string? ErrorCode { get; set; } = null;

        /// <summary>
        /// List of write operation keys associated with the sync, if the sync resulted in write attempts.
        /// </summary>
        [JsonProperty("pushOperationKeys")]
        public List<string>? PushOperationKeys { get; set; } = null;
    }
}