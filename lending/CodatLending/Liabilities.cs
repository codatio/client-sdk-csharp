
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace CodatLending
{
    using CodatLending.Models.Operations;
    using CodatLending.Models.Shared;
    using CodatLending.Utils;
    using Newtonsoft.Json;
    using System.Net.Http.Headers;
    using System.Net.Http;
    using System.Threading.Tasks;
    using System;

    /// <summary>
    /// Debt and other liabilities.
    /// </summary>
    public interface ILiabilitiesSDK
    {

        /// <summary>
        /// Generate loan summaries report
        /// 
        /// <remarks>
        /// The _Generate loan summaries_ endpoint requests the generation of the Loan Summaries report.<br/>
        /// <br/>
        /// Learn more about Codat&apos;s liabilities feature <a href="https://docs.codat.io/lending/features/liabilities-overview">here</a>.<br/>
        /// <br/>
        /// Make sure you have <a href="https://docs.codat.io/lending-api#/operations/refresh-company-data">synced a company</a> recently before calling the endpoint.<br/>
        /// 
        /// </remarks>
        /// </summary>
        Task<GenerateLoanSummaryResponse> GenerateLoanSummaryAsync(GenerateLoanSummaryRequest? request = null);

        /// <summary>
        /// Generate loan transactions report
        /// 
        /// <remarks>
        /// The _Generate loan transactions_ endpoint requests the generation of the Loan Transactions report.<br/>
        /// <br/>
        /// Learn more about Codat&apos;s liabilities feature <a href="https://docs.codat.io/lending/features/liabilities-overview">here</a>.<br/>
        /// <br/>
        /// Make sure you have <a href="https://docs.codat.io/lending-api#/operations/refresh-company-data">synced a company</a> recently before calling the endpoint.<br/>
        /// 
        /// </remarks>
        /// </summary>
        Task<GenerateLoanTransactionsResponse> GenerateLoanTransactionsAsync(GenerateLoanTransactionsRequest? request = null);

        /// <summary>
        /// Get loan summaries
        /// 
        /// <remarks>
        /// The *Get loan summaries* endpoint returns a summary by integration type of all loans identified from a company&apos;s accounting, banking, and commerce integrations.<br/>
        /// <br/>
        /// The endpoint returns a list of a company&apos;s <a href="https://docs.codat.io/lending-api#/schemas/LoanSummary">loan summaries</a> for each valid data connection.<br/>
        /// <br/>
        /// Make sure you have <a href="https://docs.codat.io/lending-api#/operations/refresh-company-data">synced a company</a> recently before calling the endpoint.<br/>
        /// 
        /// </remarks>
        /// </summary>
        Task<GetLoanSummaryResponse> GetLoanSummaryAsync(GetLoanSummaryRequest? request = null);

        /// <summary>
        /// List loan transactions
        /// 
        /// <remarks>
        /// The *List loan transactions* endpoint returns all <a href="https://docs.codat.io/lending-api#/schemas/LoanTransactions">loan transactions</a> identified from a company&apos;s accounting, banking, and commerce integrations.<br/>
        /// <br/>
        /// This detail gives analysts a better idea of the loan obligations a company may have.<br/>
        /// <br/>
        /// Make sure you have <a href="https://docs.codat.io/lending-api#/operations/refresh-company-data">synced a company</a> recently before calling the endpoint.<br/>
        /// 
        /// </remarks>
        /// </summary>
        Task<ListLoanTransactionsResponse> ListLoanTransactionsAsync(ListLoanTransactionsRequest? request = null);
    }

    /// <summary>
    /// Debt and other liabilities.
    /// </summary>
    public class LiabilitiesSDK: ILiabilitiesSDK
    {
        public SDKConfig Config { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "4.3.0";
        private const string _sdkGenVersion = "2.150.0";
        private const string _openapiDocVersion = "3.0.0";
        private const string _userAgent = "speakeasy-sdk/csharp 4.3.0 2.150.0 3.0.0 Codat.Lending";
        private string _serverUrl = "";
        private ISpeakeasyHttpClient _defaultClient;
        private ISpeakeasyHttpClient _securityClient;

        public LiabilitiesSDK(ISpeakeasyHttpClient defaultClient, ISpeakeasyHttpClient securityClient, string serverUrl, SDKConfig config)
        {
            _defaultClient = defaultClient;
            _securityClient = securityClient;
            _serverUrl = serverUrl;
            Config = config;
        }
        

        public async Task<GenerateLoanSummaryResponse> GenerateLoanSummaryAsync(GenerateLoanSummaryRequest? request = null)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = URLBuilder.Build(baseUrl, "/companies/{companyId}/reports/liabilities/loans", request);
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new GenerateLoanSummaryResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 202))
            {
                
                return response;
            }
            if((response.StatusCode == 401) || (response.StatusCode == 404) || (response.StatusCode == 429))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.ErrorMessage = JsonConvert.DeserializeObject<ErrorMessage>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<GenerateLoanTransactionsResponse> GenerateLoanTransactionsAsync(GenerateLoanTransactionsRequest? request = null)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = URLBuilder.Build(baseUrl, "/companies/{companyId}/reports/liabilities/loans/transactions", request);
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new GenerateLoanTransactionsResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 202))
            {
                
                return response;
            }
            if((response.StatusCode == 401) || (response.StatusCode == 404) || (response.StatusCode == 429))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.ErrorMessage = JsonConvert.DeserializeObject<ErrorMessage>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<GetLoanSummaryResponse> GetLoanSummaryAsync(GetLoanSummaryRequest? request = null)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = URLBuilder.Build(baseUrl, "/companies/{companyId}/reports/liabilities/loans", request);
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new GetLoanSummaryResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.LoanSummary = JsonConvert.DeserializeObject<LoanSummary>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            if((response.StatusCode == 401) || (response.StatusCode == 404) || (response.StatusCode == 429))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.ErrorMessage = JsonConvert.DeserializeObject<ErrorMessage>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        

        public async Task<ListLoanTransactionsResponse> ListLoanTransactionsAsync(ListLoanTransactionsRequest? request = null)
        {
            string baseUrl = _serverUrl;
            if (baseUrl.EndsWith("/"))
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            var urlString = URLBuilder.Build(baseUrl, "/companies/{companyId}/reports/liabilities/loans/transactions", request);
            

            var httpRequest = new HttpRequestMessage(HttpMethod.Get, urlString);
            httpRequest.Headers.Add("user-agent", _userAgent);
            
            
            var client = _securityClient;
            
            var httpResponse = await client.SendAsync(httpRequest);

            var contentType = httpResponse.Content.Headers.ContentType?.MediaType;
            
            var response = new ListLoanTransactionsResponse
            {
                StatusCode = (int)httpResponse.StatusCode,
                ContentType = contentType,
                RawResponse = httpResponse
            };
            
            if((response.StatusCode == 200))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.LoanTransactions = JsonConvert.DeserializeObject<LoanTransactions>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            if((response.StatusCode == 401) || (response.StatusCode == 404) || (response.StatusCode == 429))
            {
                if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
                {
                    response.ErrorMessage = JsonConvert.DeserializeObject<ErrorMessage>(await httpResponse.Content.ReadAsStringAsync(), new JsonSerializerSettings(){ NullValueHandling = NullValueHandling.Ignore, Converters = new JsonConverter[] { new FlexibleObjectDeserializer(), new EnumSerializer() }});
                }
                
                return response;
            }
            return response;
        }
        
    }
}