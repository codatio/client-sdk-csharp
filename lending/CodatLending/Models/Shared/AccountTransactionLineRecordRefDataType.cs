
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Codat.Lending.Models.Shared
{
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// Name of underlying data type.
    /// </summary>
    public enum AccountTransactionLineRecordRefDataType
    {
        [JsonProperty("bankTransactions")]
        BankTransactions,
        [JsonProperty("billCreditNotes")]
        BillCreditNotes,
        [JsonProperty("billPayments")]
        BillPayments,
        [JsonProperty("bills")]
        Bills,
        [JsonProperty("creditNotes")]
        CreditNotes,
        [JsonProperty("directCosts")]
        DirectCosts,
        [JsonProperty("directIncomes")]
        DirectIncomes,
        [JsonProperty("invoices")]
        Invoices,
        [JsonProperty("journalEntries")]
        JournalEntries,
        [JsonProperty("payments")]
        Payments,
        [JsonProperty("transfers")]
        Transfers,
    }

    public static class AccountTransactionLineRecordRefDataTypeExtension
    {
        public static string Value(this AccountTransactionLineRecordRefDataType value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static AccountTransactionLineRecordRefDataType ToEnum(this string value)
        {
            foreach(var field in typeof(AccountTransactionLineRecordRefDataType).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is AccountTransactionLineRecordRefDataType)
                    {
                        return (AccountTransactionLineRecordRefDataType)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum AccountTransactionLineRecordRefDataType");
        }
    }

}