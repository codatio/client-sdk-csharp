
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace CodatLending.Models.Shared
{
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    /// <summary>
    /// &amp;gt; **Payments or bill payments?**  &lt;br/&gt;
    /// 
    /// <remarks>
    /// &gt; <br/>
    /// &gt;  In Codat, payments represent accounts receivable only. For accounts payable, see <a href="https://docs.codat.io/accounting-api#/schemas/BillPayment">bill payments</a>. These include <a href="https://docs.codat.io/accounting-api#/schemas/Bill">bills</a> and credit notes against bills.<br/>
    /// <br/>
    /// &gt; View the coverage for payments in the &lt;a className=&quot;external&quot; href=&quot;https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&amp;dataType=payments&quot; target=&quot;_blank&quot;&gt;Data coverage explorer&lt;/a&gt;.<br/>
    /// <br/>
    /// ## Overview<br/>
    /// <br/>
    /// Payments include all accounts receivable transaction data. This includes <a href="https://docs.codat.io/accounting-api#/schemas/Invoice">invoices</a> and <a href="https://docs.codat.io/accounting-api#/schemas/CreditNote">credit notes</a>.<br/>
    /// <br/>
    /// A payment in Codat usually represents an allocation of money within any customer accounts receivable account. This includes, but is not strictly limited to: <br/>
    /// <br/>
    /// - A payment made against an invoice, like a credit card, cheque, or cash payment.<br/>
    /// - An allocation of a customer&apos;s credit note, either to an invoice or maybe a refund.<br/>
    /// - A payment made directly to that accounts receivable account. This might be an overpayment or a prepayment. It might also be the refund of a payment made directly to an accounts receivable account.<br/>
    /// <br/>
    /// Depending on the payments allowed by the underlying accounting package, some payment types may be combined. Please see the example for more details.<br/>
    /// <br/>
    /// In Codat, a payment contains details of:<br/>
    /// <br/>
    /// - When the payment was recorded in the accounting system.<br/>
    /// - How much it is for and in what currency that amount is in.<br/>
    /// - Who the payment was _paid by_ – the _customer_.<br/>
    /// - The payment method used.<br/>
    /// - The breakdown of the types of payments – the _line items_.<br/>
    /// <br/>
    /// Payments is a child data type of <a href="https://docs.codat.io/accounting-api#/schemas/AccountTransaction">account transactions</a>.<br/>
    /// <br/>
    /// ## Payment types<br/>
    /// <br/>
    /// ## Payment of an invoice<br/>
    /// <br/>
    /// A payment paying a single invoice has one entry in its `lines` array. This **line** has the following properties:<br/>
    /// <br/>
    /// - An _amount_ that indicates the amount of the invoice that was paid. This is always positive.<br/>
    /// - A **links** array containing one element with the following properties:<br/>
    ///   - A **type** that indicates the type of **link**, in this case an `Invoice`.<br/>
    ///   - An **id** that contains the ID of the invoice that was paid.<br/>
    ///   - An **amount** for the link. The sum of the **line.amount** and the **links.amount** must equal `0`.<br/>
    /// <br/>
    /// The **amount** field on the **line** equals the **totalAmount** on the payment.<br/>
    /// <br/>
    /// ## Payment of multiple invoices<br/>
    /// <br/>
    /// A single payment can pay multiple invoices. This can be represented in one of two formats depending on how the customer keeps their books:<br/>
    /// <br/>
    /// - The payment has multiple entries in its **lines** array, one for each invoice that is paid. Each line follows the example and rules described in <a href="#payment-of-an-invoice">Payment of an invoice</a>.<br/>
    /// - The payment has a line with multiple links to each invoice. This occurs when the proportion of the original payment allocated to each invoice is not available.<br/>
    /// <br/>
    /// Each **line** has the same properties as those described in <a href="#payment-of-an-invoice">Payment of an invoice</a>, with the **amount** indicating how much of the payment was allocated to the invoice. The sum of line amounts equals the **totalAmount** on the payment.<br/>
    /// <br/>
    /// ## Payments and refunds on account<br/>
    /// <br/>
    /// A payment on account, that is a payment that doesn’t pay a specific invoice, has one entry in its lines array. The **line** has the following properties:<br/>
    /// <br/>
    /// - A **totalAmount** that indicates the amount paid by a customer or refunded to them by a company. A payment to the customer is always negative. A refund is always positive.<br/>
    /// - A **links** array containing one element with the following properties:<br/>
    /// - A **type** that indicates the type of link. For a payment this is `PaymentOnAccount`. For a refund this is `Refund`.<br/>
    /// - The **id** containing the ID of the customer.<br/>
    /// - The **amount** for the link is `0` – the **totalAmount** _or_ the amount of the payment or refund.<br/>
    /// <br/>
    /// It is possible to have a payment that is part _on account_ and part _allocated_ to an invoice. Each line should follow the examples above.<br/>
    /// <br/>
    /// ## Using a credit note to pay an invoice<br/>
    /// <br/>
    /// The payment of an invoice using a credit note has one entry in its **lines** array. This **line** has the following properties:<br/>
    /// <br/>
    /// - An **amount** that indicates the amount of money moved, which in this case is `0`, as the credit note and invoice allocation must balance each other.<br/>
    /// - A **links** array containing two elements:<br/>
    ///   - The first **link** has:<br/>
    ///     - A **type** that indicates the type of **link**, in this case an `Invoice`.<br/>
    ///     - An **id** that contains the ID of the invoice that was paid.<br/>
    ///   - The second **link** has:<br/>
    ///     - A **type** that indicates the type of **link**, in this case a `CreditNote`.<br/>
    ///     - An **id** that contains the ID of the credit note used by this payment.<br/>
    /// <br/>
    /// The **amount** field on the **line** equals the **totalAmount** on the payment.<br/>
    /// <br/>
    /// ## Refunding a credit note<br/>
    /// <br/>
    /// A payment refunding a credit note has one entry in its **lines** array. This **line** has the following properties:<br/>
    /// <br/>
    /// - An **amount** that indicates the amount of the credit note that was refunded. This is always negative for a refund.<br/>
    /// - A **links** array that contains one element with the following properties:<br/>
    ///   - A **type** that indicates the type of **link**, in this case a `CreditNote`.<br/>
    ///   - An **id** that contains the ID of the credit note that was refunded.<br/>
    /// <br/>
    /// The **totalAmount** field on the payment equals the **amount** field of the **line**. These are both negative, as this is money leaving accounts receivable.<br/>
    /// <br/>
    /// ## Refunding a payment<br/>
    /// <br/>
    /// If a payment is refunded, for example, if a customer overpaid an invoice and the overpayment is returned to the customer, there are two payment records: <br/>
    /// <br/>
    /// - One for the incoming over payment.<br/>
    /// - Another for the outgoing refund.<br/>
    /// <br/>
    /// The payment issuing the refund has a negative **totalAmount**. This payment also has one entry in its lines array with the following properties:<br/>
    /// <br/>
    /// - An **amount** that indicates the amount that was refunded. This is always negative.<br/>
    /// - A **links** array that contains one element with the following properties:<br/>
    ///   - A **type** that indicates the type of **link**, in this case a `Payment`.<br/>
    ///   - An **id** that contains the ID of the payment that was refunded.<br/>
    /// <br/>
    /// The **amount** field on the **line** equals the **totalAmount** on the payment and is negative, as this is money leaving accounts receivable.<br/>
    /// <br/>
    /// The payment that was refunded has a line where the **amount** is positive and the type of the link is `Refund`. This payment may have several entries in its **lines** array if it was used to partly pay an invoice. <br/>
    /// <br/>
    /// For example: A £1,050 payment on a £1,000 invoice with a refund of £50 has two lines: <br/>
    /// <br/>
    /// - One for £1,000 linked to the invoice that was paid.<br/>
    /// - Another for £50 linked to the payment that refunded the overpayment with a** type** of `Refund` and an ID that corresponds to the payment.<br/>
    /// <br/>
    /// The **line** linked to the payment has the following properties:<br/>
    /// <br/>
    /// - An **amount** that indicates the amount that was refunded. This is positive as its money that was added to accounts receivable. It&apos;s balanced out by the negative amount of the refund.<br/>
    /// - A **links** array containing one element with the following properties:<br/>
    ///   - A **type** that indicates the type of **link**, in this case a `Refund`.<br/>
    ///   - An **id** that contains the ID of the payment that refunded this line.<br/>
    /// <br/>
    /// &gt; **Support for linked payments**<br/>
    /// &gt; <br/>
    /// &gt; Not all accounting packages support linking payments in this way. In some platforms, you may see a payment on account and a refund on account.<br/>
    /// <br/>
    /// ## Foreign currencies<br/>
    /// <br/>
    /// There are two types of currency rate that are included in the payments data type: <br/>
    /// <br/>
    /// Payment currency rate: <br/>
    /// <br/>
    /// - Base currency of the accounts receivable account.<br/>
    /// - Foreign currency of the payment.<br/>
    /// <br/>
    /// Payment line link currency rate: <br/>
    /// <br/>
    /// - Base currency of the item the link represents.<br/>
    /// - Foreign currency of the payment.<br/>
    /// <br/>
    /// These two rates allow the calculation of currency loss or gain for any of the transactions affected by the payment lines. The second rate is used when a payment is applied to an item in a currency that doesn&apos;t match either:<br/>
    /// <br/>
    /// - The base currency for the accounts receivable account. <br/>
    /// - The currency of the item.<br/>
    /// <br/>
    /// ```json title=&quot;Currency rate example&quot;<br/>
    /// {<br/>
    ///     &quot;id&quot;: &quot;123&quot;,<br/>
    ///     &quot;note&quot;: &quot;&quot;<br/>
    ///     &quot;totalAmount&quot;: 99.99,<br/>
    ///     &quot;currency&quot;: &quot;GBP&quot;,<br/>
    ///     &quot;lines&quot;: [<br/>
    ///         {<br/>
    ///             &quot;amount&quot;: 99.99,<br/>
    ///             &quot;links&quot;: [<br/>
    ///                 {<br/>
    ///                     &quot;type&quot;: &quot;Invoice&quot;,<br/>
    ///                     &quot;id&quot;: &quot;178&quot;,<br/>
    ///                     &quot;amount&quot;: -50,<br/>
    ///                     &quot;currencyRate&quot;:  1.9998,<br/>
    ///                 }<br/>
    ///             ]<br/>
    ///         }<br/>
    ///     ]<br/>
    /// }<br/>
    /// ```<br/>
    /// <br/>
    /// <br/>
    /// <br/>
    /// ## Example data<br/>
    /// <br/>
    /// &gt; **Object properties**<br/>
    /// &gt; <br/>
    /// &gt; For the sake of brevity, the examples here may omit properties from objects. For the full object definition, see <a href="https://api.codat.io/swagger/index.html#/Payments">Payments</a>.<br/>
    /// <br/>
    /// ## Simple examples<br/>
    /// <br/>
    /// ```json title=&quot;Payment for invoice&quot;<br/>
    /// {<br/>
    ///     &quot;totalAmount&quot;: 1000,<br/>
    ///     &quot;lines&quot;: [<br/>
    ///         {<br/>
    ///             &quot;amount&quot; : 1000,<br/>
    ///             &quot;links&quot; : [<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;Invoice&quot;,<br/>
    ///                     &quot;id&quot; : &quot;x&quot;,<br/>
    ///                     &quot;amount&quot; : -1000<br/>
    ///                 }<br/>
    ///             ]<br/>
    ///         }<br/>
    ///     ]<br/>
    /// }<br/>
    /// ```<br/>
    /// <br/>
    /// <br/>
    /// <br/>
    /// ```json title=&quot;Allocation of credit note&quot;<br/>
    /// {<br/>
    ///     &quot;totalAmount&quot;: 0,<br/>
    ///     &quot;lines&quot;: [<br/>
    ///         {<br/>
    ///             &quot;amount&quot; : 0,<br/>
    ///             &quot;links&quot; : [<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;Invoice&quot;,<br/>
    ///                     &quot;id&quot; : &quot;x&quot;,<br/>
    ///                     &quot;amount&quot; : -1000<br/>
    ///                 },<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;CreditNote&quot;,<br/>
    ///                     &quot;id&quot; : &quot;y&quot;,<br/>
    ///                     &quot;amount&quot; : 1000<br/>
    ///                 }<br/>
    ///             ]<br/>
    ///         }<br/>
    ///     ]<br/>
    /// }<br/>
    /// ```<br/>
    /// <br/>
    /// <br/>
    /// <br/>
    /// ```json title=&quot;Payment of invoice and payment on account&quot;<br/>
    /// {<br/>
    ///     &quot;totalAmount&quot;: 2000,<br/>
    ///     &quot;lines&quot;: [<br/>
    ///         {<br/>
    ///             &quot;amount&quot; : 1000,<br/>
    ///             &quot;links&quot; : [<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;Invoice&quot;,<br/>
    ///                     &quot;id&quot; : &quot;x&quot;,<br/>
    ///                     &quot;amount&quot; : -1000<br/>
    ///                 }<br/>
    ///             ]<br/>
    ///         },<br/>
    ///         {<br/>
    ///             &quot;amount&quot; : 1000,<br/>
    ///             &quot;links&quot; : [<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;PaymentOnAccount&quot;,<br/>
    ///                     &quot;id&quot; : &quot;y&quot;,<br/>
    ///                     &quot;amount&quot; : -1000<br/>
    ///                 }<br/>
    ///             ]<br/>
    ///         }<br/>
    ///     ]<br/>
    /// }<br/>
    /// ```<br/>
    /// <br/>
    /// <br/>
    /// <br/>
    /// ```json title=&quot;Refund of credit note&quot;<br/>
    /// {<br/>
    ///     &quot;totalAmount&quot;: -1000,<br/>
    ///     &quot;lines&quot;: [<br/>
    ///         {<br/>
    ///             &quot;amount&quot; : -1000,<br/>
    ///             &quot;links&quot; : [<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;CreditNote&quot;,<br/>
    ///                     &quot;id&quot; : &quot;y&quot;,<br/>
    ///                     &quot;amount&quot; : 1000<br/>
    ///                 }<br/>
    ///             ]<br/>
    ///         }<br/>
    ///     ]<br/>
    /// }<br/>
    /// ```<br/>
    /// <br/>
    /// <br/>
    /// <br/>
    /// ```json title=&quot;Refund on accounts receivable account&quot;<br/>
    /// {<br/>
    ///     &quot;totalAmount&quot;: -1000,<br/>
    ///     &quot;lines&quot;: [<br/>
    ///         {<br/>
    ///             &quot;amount&quot; : -1000,<br/>
    ///             &quot;links&quot; : [<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;PaymentOnAccount&quot;,<br/>
    ///                     &quot;id&quot; : &quot;y&quot;,<br/>
    ///                     &quot;amount&quot; : 1000<br/>
    ///                 }<br/>
    ///             ]<br/>
    ///         }<br/>
    ///     ]<br/>
    /// }<br/>
    /// ```<br/>
    /// <br/>
    /// <br/>
    /// <br/>
    /// ```json title=&quot;Linked refund on accounts receivable account&quot;<br/>
    /// {<br/>
    ///     &quot;id&quot; : &quot;payment-001&quot;,<br/>
    ///     &quot;totalAmount&quot;: 1000,<br/>
    ///     &quot;lines&quot;: [<br/>
    ///         {<br/>
    ///             &quot;amount&quot; : 1000,<br/>
    ///             &quot;links&quot; : [<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;Refund&quot;,<br/>
    ///                     &quot;id&quot; : &quot;refund-001&quot;,<br/>
    ///                     &quot;amount&quot; : -1000<br/>
    ///                 }<br/>
    ///             ]<br/>
    ///         }<br/>
    ///     ]<br/>
    /// }<br/>
    /// {<br/>
    ///     &quot;id&quot; : &quot;refund-001&quot;,<br/>
    ///     &quot;totalAmount&quot;: -1000,<br/>
    ///     &quot;lines&quot;: [<br/>
    ///         {<br/>
    ///             &quot;amount&quot; : -1000,<br/>
    ///             &quot;links&quot; : [<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;Payment&quot;,<br/>
    ///                     &quot;id&quot; : &quot;payment-001&quot;,<br/>
    ///                     &quot;amount&quot; : 1000<br/>
    ///                 }<br/>
    ///             ]<br/>
    ///         }<br/>
    ///     ]<br/>
    /// }<br/>
    /// ```<br/>
    /// <br/>
    /// <br/>
    /// <br/>
    /// ```json title=&quot;Using a credit note and cash to pay an invoice&quot;<br/>
    /// {<br/>
    ///     &quot;totalAmount&quot;: 250,<br/>
    ///     &quot;lines&quot;: [<br/>
    ///         {<br/>
    ///             &quot;amount&quot;: 0,<br/>
    ///             &quot;links&quot;: [<br/>
    ///                 {<br/>
    ///                     &quot;type&quot;: &quot;Invoice&quot;,<br/>
    ///                     &quot;id&quot;: &quot;x&quot;,<br/>
    ///                     &quot;amount&quot;: -750<br/>
    ///                 }, <br/>
    ///                 {<br/>
    ///                     &quot;type&quot;: &quot;CreditNote&quot;,<br/>
    ///                     &quot;id&quot;: &quot;y&quot;,<br/>
    ///                     &quot;amount&quot;: 750<br/>
    ///                 }<br/>
    ///             ]<br/>
    ///         },<br/>
    ///         {<br/>
    ///             &quot;amount&quot;: 250,<br/>
    ///             &quot;links&quot;: [<br/>
    ///                 {<br/>
    ///                     &quot;type&quot;: &quot;Invoice&quot;,<br/>
    ///                     &quot;id&quot;: &quot;x&quot;,<br/>
    ///                     &quot;amount&quot;: -250<br/>
    ///                 }<br/>
    ///             ]<br/>
    ///         }<br/>
    ///     ]<br/>
    /// }<br/>
    /// ```<br/>
    /// <br/>
    /// <br/>
    /// <br/>
    /// ## Complex examples<br/>
    /// <br/>
    /// ```json title=&quot;Use two credit notes and 1000 in to &quot;bank&quot; (cash, cheque etc.) to pay invoice&quot;<br/>
    /// {<br/>
    ///     &quot;totalAmount&quot;: 1000,<br/>
    ///     &quot;lines&quot;: [<br/>
    ///         {<br/>
    ///             &quot;amount&quot; : 0,<br/>
    ///             &quot;links&quot; : [<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;Invoice&quot;,<br/>
    ///                     &quot;id&quot; : &quot;x&quot;,<br/>
    ///                     &quot;amount&quot; : -1000<br/>
    ///                 },<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;CreditNote&quot;,<br/>
    ///                     &quot;id&quot; : &quot;y&quot;,<br/>
    ///                     &quot;amount&quot; : 1000<br/>
    ///                 }<br/>
    ///             ]<br/>
    ///         },<br/>
    ///         {<br/>
    ///             &quot;amount&quot; : 0,<br/>
    ///             &quot;links&quot; : [<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;Invoice&quot;,<br/>
    ///                     &quot;id&quot; : &quot;x&quot;,<br/>
    ///                     &quot;amount&quot; : -1000<br/>
    ///                 },<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;CreditNote&quot;,<br/>
    ///                     &quot;id&quot; : &quot;z&quot;,<br/>
    ///                     &quot;amount&quot; : 1000<br/>
    ///                 }<br/>
    ///             ]<br/>
    ///         },<br/>
    ///         {<br/>
    ///             &quot;amount&quot; : 1000,<br/>
    ///             &quot;links&quot; : [<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;Invoice&quot;,<br/>
    ///                     &quot;id&quot; : &quot;x&quot;,<br/>
    ///                     &quot;amount&quot; : -1000<br/>
    ///                 }<br/>
    ///             ]<br/>
    ///         }<br/>
    ///     ]<br/>
    /// }<br/>
    /// ```<br/>
    /// <br/>
    /// <br/>
    /// <br/>
    /// ```json title=&quot;Pay an invoice with two credit notes and cash, with 1000 left &apos;on account&apos;&quot;<br/>
    /// {<br/>
    ///     &quot;totalAmount&quot;: 2000,<br/>
    ///     &quot;lines&quot;: [<br/>
    ///         {<br/>
    ///             &quot;amount&quot; : 0,<br/>
    ///             &quot;links&quot; : [<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;Invoice&quot;,<br/>
    ///                     &quot;id&quot; : &quot;x&quot;,<br/>
    ///                     &quot;amount&quot; : -1000<br/>
    ///                 },<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;CreditNote&quot;,<br/>
    ///                     &quot;id&quot; : &quot;y&quot;,<br/>
    ///                     &quot;amount&quot; : 1000<br/>
    ///                 }<br/>
    ///             ]<br/>
    ///         },<br/>
    ///         {<br/>
    ///             &quot;amount&quot; : 0,<br/>
    ///             &quot;links&quot; : [<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;Invoice&quot;,<br/>
    ///                     &quot;id&quot; : &quot;x&quot;,<br/>
    ///                     &quot;amount&quot; : -1000<br/>
    ///                 },<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;CreditNote&quot;,<br/>
    ///                     &quot;id&quot; : &quot;z&quot;,<br/>
    ///                     &quot;amount&quot; : 1000<br/>
    ///                 }<br/>
    ///             ]<br/>
    ///         },<br/>
    ///         {<br/>
    ///             &quot;amount&quot; : 1000,<br/>
    ///             &quot;links&quot; : [<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;Invoice&quot;,<br/>
    ///                     &quot;id&quot; : &quot;x&quot;,<br/>
    ///                     &quot;amount&quot; : -1000<br/>
    ///                 }<br/>
    ///             ]<br/>
    ///         },<br/>
    ///         {<br/>
    ///             &quot;amount&quot; : 1000,<br/>
    ///             &quot;links&quot; : [<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;PaymentOnAccount&quot;,<br/>
    ///                     &quot;id&quot; : &quot;customer-001&quot;,<br/>
    ///                     &quot;amount&quot; : -1000<br/>
    ///                 }<br/>
    ///             ]<br/>
    ///         }<br/>
    ///     ]<br/>
    /// }<br/>
    /// ```<br/>
    /// <br/>
    /// <br/>
    /// <br/>
    /// ```json title=&quot;Two credit notes pay two invoices with no allocation amount specified&quot;<br/>
    /// {<br/>
    ///     &quot;totalAmount&quot;: 0,<br/>
    ///     &quot;lines&quot;: [<br/>
    ///         {<br/>
    ///             &quot;amount&quot; : 0,<br/>
    ///             &quot;links&quot; : [<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;Invoice&quot;,<br/>
    ///                     &quot;id&quot; : &quot;w&quot;,<br/>
    ///                     &quot;amount&quot; : -1000<br/>
    ///                 },<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;Invoice&quot;,<br/>
    ///                     &quot;id&quot; : &quot;x&quot;,<br/>
    ///                     &quot;amount&quot; : -1000<br/>
    ///                 },<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;CreditNote&quot;,<br/>
    ///                     &quot;id&quot; : &quot;y&quot;,<br/>
    ///                     &quot;amount&quot; : 1000<br/>
    ///                 },<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;CreditNote&quot;,<br/>
    ///                     &quot;id&quot; : &quot;z&quot;,<br/>
    ///                     &quot;amount&quot; : 1000<br/>
    ///                 }<br/>
    ///             ]<br/>
    ///         }<br/>
    ///     ]<br/>
    /// }<br/>
    /// ```<br/>
    /// <br/>
    /// <br/>
    /// <br/>
    /// ```json title=&quot;Two credit notes and cash pay three invoices with no allocation amount specified, and refund cash&quot;<br/>
    /// {<br/>
    ///     &quot;totalAmount&quot;: 2000,<br/>
    ///     &quot;lines&quot;: [<br/>
    ///         {<br/>
    ///             &quot;amount&quot; : 1000,<br/>
    ///             &quot;links&quot; : [<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;Invoice&quot;,<br/>
    ///                     &quot;id&quot; : &quot;w&quot;,<br/>
    ///                     &quot;amount&quot; : -1000<br/>
    ///                 },<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;Invoice&quot;,<br/>
    ///                     &quot;id&quot; : &quot;x&quot;,<br/>
    ///                     &quot;amount&quot; : -1000<br/>
    ///                 },<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;Invoice&quot;,<br/>
    ///                     &quot;id&quot; : &quot;u&quot;,<br/>
    ///                     &quot;amount&quot; : -1000<br/>
    ///                 },<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;CreditNote&quot;,<br/>
    ///                     &quot;id&quot; : &quot;y&quot;,<br/>
    ///                     &quot;amount&quot; : 1000<br/>
    ///                 },<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;CreditNote&quot;,<br/>
    ///                     &quot;id&quot; : &quot;z&quot;,<br/>
    ///                     &quot;amount&quot; : 1000<br/>
    ///                 }<br/>
    ///             ]<br/>
    ///         },<br/>
    ///         {<br/>
    ///             &quot;amount&quot; : 1000,<br/>
    ///             &quot;links&quot; : [<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;Refund&quot;,<br/>
    ///                     &quot;id&quot; : &quot;refund-001&quot;,<br/>
    ///                     &quot;amount&quot; : -1000<br/>
    ///                 }<br/>
    ///             ]<br/>
    ///         }<br/>
    ///     ]<br/>
    /// }<br/>
    /// {<br/>
    ///     &quot;id&quot; : &quot;refund-001&quot;,<br/>
    ///     &quot;totalAmount&quot;: -1000,<br/>
    ///     &quot;lines&quot;: [<br/>
    ///         {<br/>
    ///             &quot;amount&quot; : -1000,<br/>
    ///             &quot;links&quot; : [<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;Payment&quot;,<br/>
    ///                     &quot;id&quot; : &quot;payment-001&quot;,<br/>
    ///                     &quot;amount&quot; : 1000<br/>
    ///                 }<br/>
    ///             ]<br/>
    ///         }<br/>
    ///     ]<br/>
    /// }<br/>
    /// ```<br/>
    /// <br/>
    /// <br/>
    /// <br/>
    /// In this example, a payment on account is used to pay the same invoice in January and again in February.<br/>
    /// <br/>
    /// ```json title=&quot;January&quot;<br/>
    /// {<br/>
    ///     &quot;id&quot;: &quot;001&quot;,<br/>
    ///     &quot;totalAmount&quot;: 5000,<br/>
    ///     &quot;date&quot; : &quot;1901-01-01&quot;,<br/>
    ///     &quot;lines&quot;: [<br/>
    ///         {<br/>
    ///             &quot;amount&quot; : 1000,<br/>
    ///             &quot;links&quot; : [<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;Invoice&quot;,<br/>
    ///                     &quot;id&quot; : &quot;Invoice-x&quot;,<br/>
    ///                     &quot;amount&quot; : -1000<br/>
    ///                 }<br/>
    ///             ]<br/>
    ///         },<br/>
    ///         {<br/>
    ///             &quot;amount&quot; : 4000,<br/>
    ///             &quot;links&quot; : [<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;PaymentOnAccount&quot;,<br/>
    ///                     &quot;id&quot; : &quot;PaymentOnAccount-y&quot;,<br/>
    ///                     &quot;amount&quot; : -4000<br/>
    ///                 }<br/>
    ///             ]<br/>
    ///         }<br/>
    ///     ]<br/>
    /// }<br/>
    /// ```<br/>
    /// <br/>
    /// <br/>
    /// <br/>
    /// ```json title=&quot;February&quot;<br/>
    /// {<br/>
    ///     &quot;id&quot;: &quot;001&quot;,<br/>
    ///     &quot;totalAmount&quot;: 5000,<br/>
    ///     &quot;date&quot; : &quot;1901-02-01&quot;,<br/>
    ///     &quot;lines&quot;: [<br/>
    ///         {<br/>
    ///             &quot;amount&quot; : 1000,<br/>
    ///             &quot;links&quot; : [<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;Invoice&quot;,<br/>
    ///                     &quot;id&quot; : &quot;Invoice-x&quot;,<br/>
    ///                     &quot;amount&quot; : -1000<br/>
    ///                 }<br/>
    ///             ]<br/>
    ///         },<br/>
    ///         {<br/>
    ///             &quot;amount&quot; : 1000,<br/>
    ///             &quot;links&quot; : [<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;Invoice&quot;,<br/>
    ///                     &quot;id&quot; : &quot;Invoice-y&quot;,<br/>
    ///                     &quot;amount&quot; : -1000<br/>
    ///                 }<br/>
    ///             ]<br/>
    ///         },<br/>
    ///         {<br/>
    ///             &quot;amount&quot; : 3000,<br/>
    ///             &quot;links&quot; : [<br/>
    ///                 {<br/>
    ///                     &quot;type&quot; : &quot;PaymentOnAccount&quot;,<br/>
    ///                     &quot;id&quot; : &quot;PaymentOnAccount-y&quot;,<br/>
    ///                     &quot;amount&quot; : -3000<br/>
    ///                 }<br/>
    ///             ]<br/>
    ///         }<br/>
    ///     ]<br/>
    /// }<br/>
    /// ```<br/>
    /// <br/>
    /// <br/>
    /// <br/>
    /// ```json title=&quot;Two credit notes and some cash pay two invoices with no allocations specified&quot;<br/>
    /// {<br/>
    ///     &quot;totalAmount&quot;: 500,<br/>
    ///     &quot;lines&quot;: [<br/>
    ///         {<br/>
    ///             &quot;amount&quot;: 500,<br/>
    ///             &quot;links&quot;: [{<br/>
    ///                     &quot;type&quot;: &quot;Invoice&quot;,<br/>
    ///                     &quot;id&quot;: &quot;a&quot;,<br/>
    ///                     &quot;amount&quot;: -1000<br/>
    ///                 }, {<br/>
    ///                     &quot;type&quot;: &quot;Invoice&quot;,<br/>
    ///                     &quot;id&quot;: &quot;b&quot;,<br/>
    ///                     &quot;amount&quot;: -1000<br/>
    ///                 }, {<br/>
    ///                     &quot;type&quot;: &quot;CreditNote&quot;,<br/>
    ///                     &quot;id&quot;: &quot;y&quot;,<br/>
    ///                     &quot;amount&quot;: 750<br/>
    ///                 },{<br/>
    ///                     &quot;type&quot;: &quot;CreditNote&quot;,<br/>
    ///                     &quot;id&quot;: &quot;z&quot;,<br/>
    ///                     &quot;amount&quot;: 750<br/>
    ///                 }<br/>
    ///             ]<br/>
    ///         }<br/>
    ///     ]<br/>
    /// }<br/>
    /// ```
    /// </remarks>
    /// </summary>
    public class AccountingPayment
    {

        /// <summary>
        /// Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
        /// </summary>
        [JsonProperty("accountRef")]
        public AccountRef? AccountRef { get; set; }

        /// <summary>
        /// The currency data type in Codat is the &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_4217&quot;&gt;ISO 4217&lt;/a&gt; currency code, e.g. _GBP_.&lt;br/&gt;
        /// 
        /// <remarks>
        /// <br/>
        /// ## Unknown currencies<br/>
        /// <br/>
        /// In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. <br/>
        /// <br/>
        /// There are only a very small number of edge cases where this currency code is returned by the Codat system.
        /// </remarks>
        /// </summary>
        [JsonProperty("currency")]
        public string? Currency { get; set; }

        /// <summary>
        /// Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.&lt;br/&gt;
        /// 
        /// <remarks>
        /// <br/>
        /// Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.  <br/>
        /// <br/>
        /// It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company&apos;s base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.<br/>
        /// <br/>
        /// Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places). <br/>
        /// <br/>
        /// For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.<br/>
        /// <br/>
        /// ## Examples with base currency of GBP<br/>
        /// <br/>
        /// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |<br/>
        /// | :--------------- | :------------- | :------------ | :------------------------- |<br/>
        /// | **USD**          | $20            | 0.781         | £15.62                     |<br/>
        /// | **EUR**          | €20            | 0.885         | £17.70                     |<br/>
        /// | **RUB**          | ₽20            | 0.011         | £0.22                      |<br/>
        /// <br/>
        /// ## Examples with base currency of USD<br/>
        /// <br/>
        /// | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |<br/>
        /// | :--------------- | :------------- | :------------ | :------------------------- |<br/>
        /// | **GBP**          | £20            | 1.277         | $25.54                     |<br/>
        /// | **EUR**          | €20            | 1.134         | $22.68                     |<br/>
        /// | **RUB**          | ₽20            | 0.015         | $0.30                      |
        /// </remarks>
        /// </summary>
        [JsonProperty("currencyRate")]
        public decimal? CurrencyRate { get; set; }

        [JsonProperty("customerRef")]
        public AccountingCustomerRef? CustomerRef { get; set; }

        /// <summary>
        /// In Codat&amp;apos;s data model, dates and times are represented using the &amp;lt;a class=&amp;quot;external&amp;quot; href=&amp;quot;https://en.wikipedia.org/wiki/ISO_8601&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;ISO 8601 standard&amp;lt;/a&amp;gt;. Date and time fields are formatted as strings; for example:&lt;br/&gt;
        /// 
        /// <remarks>
        /// <br/>
        /// ```<br/>
        /// 2020-10-08T22:40:50Z<br/>
        /// 2021-01-01T00:00:00<br/>
        /// ```<br/>
        /// <br/>
        /// <br/>
        /// <br/>
        /// When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:<br/>
        /// <br/>
        /// - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`<br/>
        /// - Unqualified local time: `2021-11-15T01:00:00`<br/>
        /// - UTC time offsets: `2021-11-15T01:00:00-05:00`<br/>
        /// <br/>
        /// &gt; Time zones<br/>
        /// &gt; <br/>
        /// &gt; Not all dates from Codat will contain information about time zones.  <br/>
        /// &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
        /// </remarks>
        /// </summary>
        [JsonProperty("date")]
        public string Date { get; set; } = default!;

        /// <summary>
        /// Identifier for the payment, unique to the company in the accounting platform.
        /// </summary>
        [JsonProperty("id")]
        public string? Id { get; set; }

        /// <summary>
        /// An array of payment lines.
        /// </summary>
        [JsonProperty("lines")]
        public List<PaymentLine>? Lines { get; set; }

        [JsonProperty("metadata")]
        public Metadata? Metadata { get; set; }

        [JsonProperty("modifiedDate")]
        public string? ModifiedDate { get; set; }

        /// <summary>
        /// Any additional information associated with the payment.
        /// </summary>
        [JsonProperty("note")]
        public string? Note { get; set; }

        [JsonProperty("paymentMethodRef")]
        public object? PaymentMethodRef { get; set; }

        /// <summary>
        /// Friendly reference for the payment.
        /// </summary>
        [JsonProperty("reference")]
        public string? Reference { get; set; }

        [JsonProperty("sourceModifiedDate")]
        public string? SourceModifiedDate { get; set; }

        /// <summary>
        /// Supplemental data is additional data you can include in our standard data types. &lt;br/&gt;
        /// 
        /// <remarks>
        /// <br/>
        /// It is referenced as a configured dynamic key value pair that is unique to the accounting platform. <a href="https://docs.codat.io/using-the-api/supplemental-data/overview">Learn more</a> about supplemental data.
        /// </remarks>
        /// </summary>
        [JsonProperty("supplementalData")]
        public SupplementalData? SupplementalData { get; set; }

        /// <summary>
        /// Amount of the payment in the payment currency. This value should never change and represents the amount of money paid into the customer&amp;apos;s account.
        /// </summary>
        [JsonProperty("totalAmount")]
        public decimal? TotalAmount { get; set; }
    }
}