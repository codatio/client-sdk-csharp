
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace CodatLending.Models.Shared
{
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// Type of payment.
    /// </summary>
    public enum PaymentType
    {
        [JsonProperty("Cash")]
        Cash,
        [JsonProperty("Card")]
        Card,
        [JsonProperty("Invoice")]
        Invoice,
        [JsonProperty("OnlineCard")]
        OnlineCard,
        [JsonProperty("Swish")]
        Swish,
        [JsonProperty("Vipps")]
        Vipps,
        [JsonProperty("Mobile")]
        Mobile,
        [JsonProperty("StoreCredit")]
        StoreCredit,
        [JsonProperty("Paypal")]
        Paypal,
        [JsonProperty("Custom")]
        Custom,
        [JsonProperty("Prepaid")]
        Prepaid,
        [JsonProperty("Unknown")]
        Unknown,
    }

    public static class PaymentTypeExtension
    {
        public static string Value(this PaymentType value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static PaymentType ToEnum(this string value)
        {
            foreach(var field in typeof(PaymentType).GetFields())
            {
                var attribute = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is PaymentType)
                    {
                        return (PaymentType)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum PaymentType");
        }
    }
}