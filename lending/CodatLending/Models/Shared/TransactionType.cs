
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace CodatLending.Models.Shared
{
    using Newtonsoft.Json;
    using System;
    
    
    /// <summary>
    /// The type of the platform transaction:  
    /// 
    /// <remarks>
    /// - `Unknown`  
    /// - `FailedPayout` — Failed transfer of funds from the seller's merchant account to their bank account.  
    /// - `Payment` — Credit and debit card payments.  
    /// - `PaymentFee` — Payment provider's fee on each card payment.  
    /// - `PaymentFeeRefund` — Payment provider's fee that has been refunded to the seller.  
    /// - `Payout` — Transfer of funds from the seller's merchant account to their bank account.  
    /// - `Refund` — Refunds to a customer's credit or debit card.  
    /// - `Transfer` — Secure transfer of funds to the seller's bank account.  
    /// </remarks>
    /// </summary>
    public enum TransactionType
    {
    	[JsonProperty("Payment")]
		Payment,
		[JsonProperty("Refund")]
		Refund,
		[JsonProperty("Payout")]
		Payout,
		[JsonProperty("FailedPayout")]
		FailedPayout,
		[JsonProperty("Transfer")]
		Transfer,
		[JsonProperty("PaymentFee")]
		PaymentFee,
		[JsonProperty("PaymentFeeRefund")]
		PaymentFeeRefund,
		[JsonProperty("Unknown")]
		Unknown,
    }
    
    public static class TransactionTypeExtension
    {
        public static string Value(this TransactionType value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static TransactionType ToEnum(this string value)
        {
            foreach(var field in typeof(TransactionType).GetFields())
            {
                var attribute = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    return (TransactionType)field.GetValue(null);
                }
            }

            throw new Exception($"Unknown value {value} for enum TransactionType");
        }
    }
    
}