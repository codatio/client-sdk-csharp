//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Codat.Platform.Models.Errors
{
    using Codat.Platform.Models.Components;
    using Codat.Platform.Utils;
    using Newtonsoft.Json;
    using System;
    using System.Net.Http;

    public class ErrorMessagePayload
    {
        /// <summary>
        /// The HTTP status code returned by the error.
        /// </summary>
        [JsonProperty("statusCode")]
        public long? StatusCode { get; set; }

        /// <summary>
        /// Codat&apos;s service the returned the error.
        /// </summary>
        [JsonProperty("service")]
        public string? Service { get; set; }

        /// <summary>
        /// A brief description of the error.
        /// </summary>
        [JsonProperty("error")]
        public string? Error { get; set; }

        /// <summary>
        /// Unique identifier used to propagate to all downstream services and determine the source of the error.
        /// </summary>
        [JsonProperty("correlationId")]
        public string? CorrelationId { get; set; }

        /// <summary>
        /// A human-readable object describing validation decisions Codat has made. If an operation has failed because of validation errors, they will be detailed here.
        /// </summary>
        [JsonProperty("validation")]
        public ErrorValidation? Validation { get; set; }

        /// <summary>
        /// `True` if the error occurred transiently and can be retried.
        /// </summary>
        [JsonProperty("canBeRetried")]
        public string? CanBeRetried { get; set; }

        /// <summary>
        /// Machine readable error code used to automate processes based on the code returned.
        /// </summary>
        [JsonProperty("detailedErrorCode")]
        public long? DetailedErrorCode { get; set; }
    }

    /// <summary>
    /// Your `query` parameter was not correctly formed
    /// </summary>
    public class ErrorMessage : CodatPlatformException
    {
        /// <summary>
        ///  The original data that was passed to this exception.
        /// </summary>
        public ErrorMessagePayload Payload { get; }

        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible. Use ErrorMessage.Payload.Service instead.")]
        public string? Service { get; set; }

        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible. Use ErrorMessage.Payload.Error instead.")]
        public string? Error { get; set; }

        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible. Use ErrorMessage.Payload.CorrelationId instead.")]
        public string? CorrelationId { get; set; }

        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible. Use ErrorMessage.Payload.Validation instead.")]
        public ErrorValidation? Validation { get; set; }

        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible. Use ErrorMessage.Payload.CanBeRetried instead.")]
        public string? CanBeRetried { get; set; }

        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible. Use ErrorMessage.Payload.DetailedErrorCode instead.")]
        public long? DetailedErrorCode { get; set; }

        public ErrorMessage(
            ErrorMessagePayload payload,
            HttpResponseMessage rawResponse,
            string body
        ): base("API error occurred", rawResponse, body)
        {
           Payload = payload;

           #pragma warning disable CS0618
           Service = payload.Service;
           Error = payload.Error;
           CorrelationId = payload.CorrelationId;
           Validation = payload.Validation;
           CanBeRetried = payload.CanBeRetried;
           DetailedErrorCode = payload.DetailedErrorCode;
           #pragma warning restore CS0618
        }
    }

}