
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Codat.Platform
{
    using Codat.Platform.Models.Shared;
    using Codat.Platform.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;
    using System;



    /// <summary>
    /// Platform API: Platform API
    /// 
    /// <remarks>
    /// An API for the common components of all of Codat&apos;s products.<br/>
    /// <br/>
    /// These end points cover creating and managing your companies, data connections, and integrations.<br/>
    /// <br/>
    /// <a href="https://docs.codat.io/core-concepts/companies">Read about the building blocks of Codat...</a><br/>
    /// <br/>
    /// <a href="https://github.com/codatio/oas">See our OpenAPI spec</a> 
    /// </remarks>
    /// </summary>
    public interface ICodatPlatform
    {

        /// <summary>
        /// Manage your Codat instance.
        /// </summary>
        public ISettings Settings { get; }

        /// <summary>
        /// Create and manage your Codat companies.
        /// </summary>
        public ICompanies Companies { get; }

        /// <summary>
        /// Manage your companies&apos; data connections.
        /// </summary>
        public IConnections Connections { get; }

        /// <summary>
        /// View and configure custom data types for supported integrations.
        /// </summary>
        public ICustomDataType CustomDataType { get; }

        /// <summary>
        /// View push options and get push statuses.
        /// </summary>
        public IPushData PushData { get; }

        /// <summary>
        /// Asynchronously retrieve data from an integration to refresh data in Codat.
        /// </summary>
        public IRefreshData RefreshData { get; }

        /// <summary>
        /// Create groups and link them to your Codat companies.
        /// </summary>
        public IGroups Groups { get; }

        /// <summary>
        /// View and manage your available integrations in Codat.
        /// </summary>
        public IIntegrations Integrations { get; }

        /// <summary>
        /// View and configure supplemental data for supported data types.
        /// </summary>
        public ISupplementalData SupplementalData { get; }

        /// <summary>
        /// Manage webhooks, rules, and events.
        /// </summary>
        public IWebhooks Webhooks { get; }
    }
    
    public class SDKConfig
    {
        public static string[] ServerList = new string[]
        {
            "https://api.codat.io",
        };
        /// Contains the list of servers available to the SDK
        public string serverUrl = "";
        public int serverIndex = 0;

        public string GetTemplatedServerDetails()
        {
            if (!String.IsNullOrEmpty(this.serverUrl))
            {
                return Utilities.TemplateUrl(Utilities.RemoveSuffix(this.serverUrl, "/"), new Dictionary<string, string>());
            }
            return Utilities.TemplateUrl(SDKConfig.ServerList[this.serverIndex], new Dictionary<string, string>());
        }
    }

    /// <summary>
    /// Platform API: Platform API
    /// 
    /// <remarks>
    /// An API for the common components of all of Codat&apos;s products.<br/>
    /// <br/>
    /// These end points cover creating and managing your companies, data connections, and integrations.<br/>
    /// <br/>
    /// <a href="https://docs.codat.io/core-concepts/companies">Read about the building blocks of Codat...</a><br/>
    /// <br/>
    /// <a href="https://github.com/codatio/oas">See our OpenAPI spec</a> 
    /// </remarks>
    /// </summary>
    public class CodatPlatform: ICodatPlatform
    {
        public SDKConfig SDKConfiguration { get; private set; }

        private const string _language = "csharp";
        private const string _sdkVersion = "3.5.0";
        private const string _sdkGenVersion = "2.277.0";
        private const string _openapiDocVersion = "3.0.0";
        private const string _userAgent = "speakeasy-sdk/csharp 3.5.0 2.277.0 3.0.0 Codat.Platform";
        private string _serverUrl = "";
        private int _serverIndex = 0;
        private ISpeakeasyHttpClient _defaultClient;
        private Func<Security>? _securitySource;
        public ISettings Settings { get; private set; }
        public ICompanies Companies { get; private set; }
        public IConnections Connections { get; private set; }
        public ICustomDataType CustomDataType { get; private set; }
        public IPushData PushData { get; private set; }
        public IRefreshData RefreshData { get; private set; }
        public IGroups Groups { get; private set; }
        public IIntegrations Integrations { get; private set; }
        public ISupplementalData SupplementalData { get; private set; }
        public IWebhooks Webhooks { get; private set; }

        public CodatPlatform(Security? security = null, Func<Security>? securitySource = null, int? serverIndex = null, string? serverUrl = null, Dictionary<string, string>? urlParams = null, ISpeakeasyHttpClient? client = null)
        {
            if (serverIndex != null)
            {
                _serverIndex = serverIndex.Value;
            }

            if (serverUrl != null)
            {
                if (urlParams != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, urlParams);
                }
                _serverUrl = serverUrl;
            }

            _defaultClient = new SpeakeasyHttpClient(client);

            if(securitySource != null)
            {
                _securitySource = securitySource;
            }
            else if(security != null)
            {
                _securitySource = () => security;
            }
            else
            {
                throw new Exception("security and securitySource cannot both be null");
            }

            SDKConfiguration = new SDKConfig()
            {
                serverIndex = _serverIndex,
                serverUrl = _serverUrl
            };

            Settings = new Settings(_defaultClient, _securitySource, _serverUrl, SDKConfiguration);
            Companies = new Companies(_defaultClient, _securitySource, _serverUrl, SDKConfiguration);
            Connections = new Connections(_defaultClient, _securitySource, _serverUrl, SDKConfiguration);
            CustomDataType = new CustomDataType(_defaultClient, _securitySource, _serverUrl, SDKConfiguration);
            PushData = new PushData(_defaultClient, _securitySource, _serverUrl, SDKConfiguration);
            RefreshData = new RefreshData(_defaultClient, _securitySource, _serverUrl, SDKConfiguration);
            Groups = new Groups(_defaultClient, _securitySource, _serverUrl, SDKConfiguration);
            Integrations = new Integrations(_defaultClient, _securitySource, _serverUrl, SDKConfiguration);
            SupplementalData = new SupplementalData(_defaultClient, _securitySource, _serverUrl, SDKConfiguration);
            Webhooks = new Webhooks(_defaultClient, _securitySource, _serverUrl, SDKConfiguration);
        }
    }
}
