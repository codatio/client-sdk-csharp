
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Codat.Models.DataIntegrity
{
    using System;
using System.Collections.Generic;
using System.Net.Http;
using Newtonsoft.Json;
using Codat.Models.Shared;
using Codat.Utils;
    
    public class GetDataIntegritySummariesRequest
    {
        
        [JsonProperty("companyId")]
        public string CompanyId { get; set; }
        
    /// <summary>
    /// A key for a Codat data type.
    /// </summary>
        
        [JsonProperty("dataType")]
        public DataIntegrityDataType DataType { get; set; }
        
    /// <summary>
    /// Codat query string. [Read more](https://docs.codat.io/using-the-api/querying).
    /// </summary>
        
        [JsonProperty("query")]
        public string? Query { get; set; }
        
        internal static HttpRequestMessage BuildHttpRequestMessage(string operationId, GetDataIntegritySummariesRequest value, string baseUrl)
        {
            if("get-data-integrity-summaries" == operationId)
            {
                var queryParams = new List<string>();
                
                
                
                queryParams.Add(QueryParamSerializer.Serialize("form",true, "query", "", value.Query));
                var queryParamString = $"?{String.Join("&", queryParams)}";
                
                var companyId = PathParamSerializer.Serialize("simple", false, value.CompanyId);
                
                var dataType = PathParamSerializer.Serialize("simple", false, value.DataType);
                
                var message = new HttpRequestMessage(HttpMethod.Get, baseUrl + $"/data/companies/{companyId}/assess/dataTypes/{dataType}/dataIntegrity/summaries" + queryParamString);
                return message;
            }
            throw new ArgumentException($"Attempt to build HttpRequestMessage for invalid operationId [{operationId}] for request type [GetDataIntegritySummariesRequest]");
        }
    }
}