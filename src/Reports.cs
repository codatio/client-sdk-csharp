
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Codat.Reports
{
    using System;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Codat.Models.Reports;
using Codat.Models.Shared;
using Codat.Utils;

    public interface IReportsSDK
    {
        Task<GetAccountsForEnhancedBalanceSheetResponse> GetAccountsForEnhancedBalanceSheetAsync(GetAccountsForEnhancedBalanceSheetRequest request);
        Task<GetAccountsForEnhancedProfitAndLossResponse> GetAccountsForEnhancedProfitAndLossAsync(GetAccountsForEnhancedProfitAndLossRequest request);
        Task<GetCommerceCustomerRetentionMetricsResponse> GetCommerceCustomerRetentionMetricsAsync(GetCommerceCustomerRetentionMetricsRequest request);
        Task<GetCommerceLifetimeValueMetricsResponse> GetCommerceLifetimeValueMetricsAsync(GetCommerceLifetimeValueMetricsRequest request);
        Task<GetCommerceOrdersMetricsResponse> GetCommerceOrdersMetricsAsync(GetCommerceOrdersMetricsRequest request);
        Task<GetCommerceRefundsMetricsResponse> GetCommerceRefundsMetricsAsync(GetCommerceRefundsMetricsRequest request);
        Task<GetCommerceRevenueMetricsResponse> GetCommerceRevenueMetricsAsync(GetCommerceRevenueMetricsRequest request);
        Task<GetEnhancedBalanceSheetResponse> GetEnhancedBalanceSheetAsync(GetEnhancedBalanceSheetRequest request);
        Task<GetEnhancedCashFlowTransactionsResponse> GetEnhancedCashFlowTransactionsAsync(GetEnhancedCashFlowTransactionsRequest request);
        Task<GetEnhancedFinancialMetricsResponse> GetEnhancedFinancialMetricsAsync(GetEnhancedFinancialMetricsRequest request);
        Task<GetEnhancedInvoicesReportResponse> GetEnhancedInvoicesReportAsync(GetEnhancedInvoicesReportRequest request);
        Task<GetEnhancedProfitAndLossResponse> GetEnhancedProfitAndLossAsync(GetEnhancedProfitAndLossRequest request);
        Task<GetRecurringRevenueMetricsResponse> GetRecurringRevenueMetricsAsync(GetRecurringRevenueMetricsRequest request);
        Task<RequestRecurringRevenueMetricsResponse> RequestRecurringRevenueMetricsAsync(RequestRecurringRevenueMetricsRequest request);
    }

    public class ReportsSDK: IReportsSDK
    {

        public SDKConfig Config { get; private set; }
        private const string _language = "csharp";
        private const string _sdkVersion = "0.0.1";
        private const string _sdkGenVersion = "internal";
        private const string _openapiDocVersion = "1.0";
        public Uri ServerUrl { get { return _defaultClient.Client.BaseAddress; } }
        private SpeakeasyHttpClient _defaultClient;
        private SpeakeasyHttpClient _securityClient;

        public ReportsSDK(SpeakeasyHttpClient defaultClient, SpeakeasyHttpClient securityClient, SDKConfig config)
        {
            _defaultClient = defaultClient;
            _securityClient = securityClient;
            Config = config;
        }

        
    /// <summary>
    /// Get enhanced balance sheet accounts
    /// 
    /// <remarks>
    /// The Enhanced Balance Sheet Accounts endpoint returns a list of categorized accounts that appear on a company’s Balance Sheet along with a balance per financial statement date.
    /// 
    /// Codat suggests a category for each account automatically, but you can [change it](/docs/assess-categorizing-accounts-ecommerce-lending) to a more suitable one.
    /// </remarks>
    /// </summary>
    public async Task<GetAccountsForEnhancedBalanceSheetResponse> GetAccountsForEnhancedBalanceSheetAsync(GetAccountsForEnhancedBalanceSheetRequest request)
    {
        string baseUrl = "";
        var message = GetAccountsForEnhancedBalanceSheetRequest.BuildHttpRequestMessage("get-accounts-for-enhanced-balance-sheet", request, baseUrl);
        var client = _securityClient;

        message.Headers.Add("user-agent", $"speakeasy-sdk/{_language} {_sdkVersion} {_sdkGenVersion} {_openapiDocVersion}");
        var httpResponseMessage = await client.SendAsync(message);
        var response = new GetAccountsForEnhancedBalanceSheetResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.EnhancedReport = JsonConvert.DeserializeObject<EnhancedReport>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401) || (response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Schema = JsonConvert.DeserializeObject<Schema>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    /// <summary>
    /// Get enhanced profit and loss accounts
    /// 
    /// <remarks>
    /// The Enhanced Profit and Loss Accounts endpoint returns a list of categorized accounts that appear on a company’s Profit and Loss. It also includes a balance per the financial statement date.
    /// 
    /// Codat suggests a category for each account automatically, but you can [change it](/docs/assess-categorizing-accounts-ecommerce-lending) to a more suitable one.
    /// </remarks>
    /// </summary>
    public async Task<GetAccountsForEnhancedProfitAndLossResponse> GetAccountsForEnhancedProfitAndLossAsync(GetAccountsForEnhancedProfitAndLossRequest request)
    {
        string baseUrl = "";
        var message = GetAccountsForEnhancedProfitAndLossRequest.BuildHttpRequestMessage("get-accounts-for-enhanced-profit-and-loss", request, baseUrl);
        var client = _securityClient;

        message.Headers.Add("user-agent", $"speakeasy-sdk/{_language} {_sdkVersion} {_sdkGenVersion} {_openapiDocVersion}");
        var httpResponseMessage = await client.SendAsync(message);
        var response = new GetAccountsForEnhancedProfitAndLossResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.EnhancedReport = JsonConvert.DeserializeObject<EnhancedReport>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401) || (response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Schema = JsonConvert.DeserializeObject<Schema>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    /// <summary>
    /// Get customer retention metrics
    /// 
    /// <remarks>
    /// Gets the customer retention metrics for a specific company connection, over one or more periods of time.
    /// </remarks>
    /// </summary>
    public async Task<GetCommerceCustomerRetentionMetricsResponse> GetCommerceCustomerRetentionMetricsAsync(GetCommerceCustomerRetentionMetricsRequest request)
    {
        string baseUrl = "";
        var message = GetCommerceCustomerRetentionMetricsRequest.BuildHttpRequestMessage("get-commerce-customer-retention-metrics", request, baseUrl);
        var client = _securityClient;

        message.Headers.Add("user-agent", $"speakeasy-sdk/{_language} {_sdkVersion} {_sdkGenVersion} {_openapiDocVersion}");
        var httpResponseMessage = await client.SendAsync(message);
        var response = new GetCommerceCustomerRetentionMetricsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Report = JsonConvert.DeserializeObject<Report>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401) || (response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Schema = JsonConvert.DeserializeObject<Schema>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    /// <summary>
    /// Get lifetime value metric
    /// 
    /// <remarks>
    /// Gets the lifetime value metric for a specific company connection, over one or more periods of time.
    /// </remarks>
    /// </summary>
    public async Task<GetCommerceLifetimeValueMetricsResponse> GetCommerceLifetimeValueMetricsAsync(GetCommerceLifetimeValueMetricsRequest request)
    {
        string baseUrl = "";
        var message = GetCommerceLifetimeValueMetricsRequest.BuildHttpRequestMessage("get-commerce-lifetime-value-metrics", request, baseUrl);
        var client = _securityClient;

        message.Headers.Add("user-agent", $"speakeasy-sdk/{_language} {_sdkVersion} {_sdkGenVersion} {_openapiDocVersion}");
        var httpResponseMessage = await client.SendAsync(message);
        var response = new GetCommerceLifetimeValueMetricsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Report = JsonConvert.DeserializeObject<Report>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401) || (response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Schema = JsonConvert.DeserializeObject<Schema>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    /// <summary>
    /// Get orders report
    /// 
    /// <remarks>
    /// Gets the order information for a specific company connection, over one or more periods of time.
    /// </remarks>
    /// </summary>
    public async Task<GetCommerceOrdersMetricsResponse> GetCommerceOrdersMetricsAsync(GetCommerceOrdersMetricsRequest request)
    {
        string baseUrl = "";
        var message = GetCommerceOrdersMetricsRequest.BuildHttpRequestMessage("get-commerce-orders-metrics", request, baseUrl);
        var client = _securityClient;

        message.Headers.Add("user-agent", $"speakeasy-sdk/{_language} {_sdkVersion} {_sdkGenVersion} {_openapiDocVersion}");
        var httpResponseMessage = await client.SendAsync(message);
        var response = new GetCommerceOrdersMetricsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Report = JsonConvert.DeserializeObject<Report>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401) || (response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Schema = JsonConvert.DeserializeObject<Schema>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    /// <summary>
    /// Get refunds report
    /// 
    /// <remarks>
    /// Gets the refunds information for a specific company connection, over one or more periods of time.
    /// </remarks>
    /// </summary>
    public async Task<GetCommerceRefundsMetricsResponse> GetCommerceRefundsMetricsAsync(GetCommerceRefundsMetricsRequest request)
    {
        string baseUrl = "";
        var message = GetCommerceRefundsMetricsRequest.BuildHttpRequestMessage("get-commerce-refunds-metrics", request, baseUrl);
        var client = _securityClient;

        message.Headers.Add("user-agent", $"speakeasy-sdk/{_language} {_sdkVersion} {_sdkGenVersion} {_openapiDocVersion}");
        var httpResponseMessage = await client.SendAsync(message);
        var response = new GetCommerceRefundsMetricsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Report = JsonConvert.DeserializeObject<Report>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401) || (response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Schema = JsonConvert.DeserializeObject<Schema>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    /// <summary>
    /// Get commerce revenue metrics
    /// 
    /// <remarks>
    /// Get the revenue and revenue growth for a specific company connection, over one or more periods of time.
    /// </remarks>
    /// </summary>
    public async Task<GetCommerceRevenueMetricsResponse> GetCommerceRevenueMetricsAsync(GetCommerceRevenueMetricsRequest request)
    {
        string baseUrl = "";
        var message = GetCommerceRevenueMetricsRequest.BuildHttpRequestMessage("get-commerce-revenue-metrics", request, baseUrl);
        var client = _securityClient;

        message.Headers.Add("user-agent", $"speakeasy-sdk/{_language} {_sdkVersion} {_sdkGenVersion} {_openapiDocVersion}");
        var httpResponseMessage = await client.SendAsync(message);
        var response = new GetCommerceRevenueMetricsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Report = JsonConvert.DeserializeObject<Report>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401) || (response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Schema = JsonConvert.DeserializeObject<Schema>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    /// <summary>
    /// Get enhanced balance sheet report
    /// 
    /// <remarks>
    /// Gets a fully categorized balance sheet statement for a given company, over one or more period(s).
    /// </remarks>
    /// </summary>
    [Obsolete("This method will be removed in a future release, please migrate away from it as soon as possible")]
    public async Task<GetEnhancedBalanceSheetResponse> GetEnhancedBalanceSheetAsync(GetEnhancedBalanceSheetRequest request)
    {
        string baseUrl = "";
        var message = GetEnhancedBalanceSheetRequest.BuildHttpRequestMessage("get-enhanced-balance-sheet", request, baseUrl);
        var client = _securityClient;

        message.Headers.Add("user-agent", $"speakeasy-sdk/{_language} {_sdkVersion} {_sdkGenVersion} {_openapiDocVersion}");
        var httpResponseMessage = await client.SendAsync(message);
        var response = new GetEnhancedBalanceSheetResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Report = JsonConvert.DeserializeObject<Report>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401) || (response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Schema = JsonConvert.DeserializeObject<Schema>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    /// <summary>
    /// Get enhanced cash flow report
    /// 
    /// <remarks>
    /// > **Categorization engine**
    /// > 
    /// > The categorization engine uses machine learning and has been fully trained against Plaid and TrueLayer banking data sources. It is not fully trained against the Basiq banking data source.
    /// 
    /// The Enhanced Cash Flow Transactions endpoint provides a fully categorized list of banking transactions for a company. Accounts and transaction data are obtained from the company's banking data sources.
    /// </remarks>
    /// </summary>
    public async Task<GetEnhancedCashFlowTransactionsResponse> GetEnhancedCashFlowTransactionsAsync(GetEnhancedCashFlowTransactionsRequest request)
    {
        string baseUrl = "";
        var message = GetEnhancedCashFlowTransactionsRequest.BuildHttpRequestMessage("get-enhanced-cash-flow-transactions", request, baseUrl);
        var client = _securityClient;

        message.Headers.Add("user-agent", $"speakeasy-sdk/{_language} {_sdkVersion} {_sdkGenVersion} {_openapiDocVersion}");
        var httpResponseMessage = await client.SendAsync(message);
        var response = new GetEnhancedCashFlowTransactionsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.EnhancedCashFlowTransactions = JsonConvert.DeserializeObject<EnhancedCashFlowTransactions>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401) || (response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Schema = JsonConvert.DeserializeObject<Schema>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    /// <summary>
    /// List financial metrics
    /// 
    /// <remarks>
    /// Gets all the available financial metrics for a given company, over one or more periods.
    /// </remarks>
    /// </summary>
    [Obsolete("This method will be removed in a future release, please migrate away from it as soon as possible")]
    public async Task<GetEnhancedFinancialMetricsResponse> GetEnhancedFinancialMetricsAsync(GetEnhancedFinancialMetricsRequest request)
    {
        string baseUrl = "";
        var message = GetEnhancedFinancialMetricsRequest.BuildHttpRequestMessage("get-enhanced-financial-metrics", request, baseUrl);
        var client = _securityClient;

        message.Headers.Add("user-agent", $"speakeasy-sdk/{_language} {_sdkVersion} {_sdkGenVersion} {_openapiDocVersion}");
        var httpResponseMessage = await client.SendAsync(message);
        var response = new GetEnhancedFinancialMetricsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.FinancialMetrics = JsonConvert.DeserializeObject<FinancialMetrics>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    /// <summary>
    /// Get enhanced invoices report
    /// 
    /// <remarks>
    /// Gets a list of invoices linked to the corresponding banking transaction
    /// </remarks>
    /// </summary>
    public async Task<GetEnhancedInvoicesReportResponse> GetEnhancedInvoicesReportAsync(GetEnhancedInvoicesReportRequest request)
    {
        string baseUrl = "";
        var message = GetEnhancedInvoicesReportRequest.BuildHttpRequestMessage("get-enhanced-invoices-report", request, baseUrl);
        var client = _securityClient;

        message.Headers.Add("user-agent", $"speakeasy-sdk/{_language} {_sdkVersion} {_sdkGenVersion} {_openapiDocVersion}");
        var httpResponseMessage = await client.SendAsync(message);
        var response = new GetEnhancedInvoicesReportResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.EnhancedInvoicesReport = JsonConvert.DeserializeObject<EnhancedInvoicesReport>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401) || (response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Schema = JsonConvert.DeserializeObject<Schema>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    /// <summary>
    /// Get enhanced profit and loss report
    /// 
    /// <remarks>
    /// Gets a fully categorized profit and loss statement for a given company, over one or more period(s).
    /// </remarks>
    /// </summary>
    [Obsolete("This method will be removed in a future release, please migrate away from it as soon as possible")]
    public async Task<GetEnhancedProfitAndLossResponse> GetEnhancedProfitAndLossAsync(GetEnhancedProfitAndLossRequest request)
    {
        string baseUrl = "";
        var message = GetEnhancedProfitAndLossRequest.BuildHttpRequestMessage("get-enhanced-profit-and-loss", request, baseUrl);
        var client = _securityClient;

        message.Headers.Add("user-agent", $"speakeasy-sdk/{_language} {_sdkVersion} {_sdkGenVersion} {_openapiDocVersion}");
        var httpResponseMessage = await client.SendAsync(message);
        var response = new GetEnhancedProfitAndLossResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Report = JsonConvert.DeserializeObject<Report>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401) || (response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Schema = JsonConvert.DeserializeObject<Schema>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    /// <summary>
    /// Get key subscription revenue metrics
    /// 
    /// <remarks>
    /// Gets key metrics for subscription revenue.
    /// </remarks>
    /// </summary>
    public async Task<GetRecurringRevenueMetricsResponse> GetRecurringRevenueMetricsAsync(GetRecurringRevenueMetricsRequest request)
    {
        string baseUrl = "";
        var message = GetRecurringRevenueMetricsRequest.BuildHttpRequestMessage("get-recurring-revenue-metrics", request, baseUrl);
        var client = _securityClient;

        message.Headers.Add("user-agent", $"speakeasy-sdk/{_language} {_sdkVersion} {_sdkGenVersion} {_openapiDocVersion}");
        var httpResponseMessage = await client.SendAsync(message);
        var response = new GetRecurringRevenueMetricsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Report = JsonConvert.DeserializeObject<Report>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401) || (response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Schema = JsonConvert.DeserializeObject<Schema>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    /// <summary>
    /// Generate key subscription revenue metrics
    /// 
    /// <remarks>
    /// Requests production of key subscription revenue metrics.
    /// </remarks>
    /// </summary>
    public async Task<RequestRecurringRevenueMetricsResponse> RequestRecurringRevenueMetricsAsync(RequestRecurringRevenueMetricsRequest request)
    {
        string baseUrl = "";
        var message = RequestRecurringRevenueMetricsRequest.BuildHttpRequestMessage("request-recurring-revenue-metrics", request, baseUrl);
        var client = _securityClient;

        message.Headers.Add("user-agent", $"speakeasy-sdk/{_language} {_sdkVersion} {_sdkGenVersion} {_openapiDocVersion}");
        var httpResponseMessage = await client.SendAsync(message);
        var response = new RequestRecurringRevenueMetricsResponse
        {
            StatusCode = (int)httpResponseMessage.StatusCode,
            ContentType = httpResponseMessage.Content.Headers.ContentType?.MediaType,
            RawResponse = httpResponseMessage
        };
        if((response.StatusCode == 200))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Report = JsonConvert.DeserializeObject<Report>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        if((response.StatusCode == 401) || (response.StatusCode == 404))
        {
            if(Utilities.IsContentTypeMatch("application/json",response.ContentType))
            {
                response.Schema = JsonConvert.DeserializeObject<Schema>(await httpResponseMessage.Content.ReadAsStringAsync(), new FlexibleObjectDeserializer());
            }
            return response;
        }
        return response;
    }

        
    }
}