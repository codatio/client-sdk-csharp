//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Openapi
{
    using Newtonsoft.Json;
    using Openapi.Hooks;
    using Openapi.Models.Components;
    using Openapi.Models.Errors;
    using Openapi.Utils.Retries;
    using Openapi.Utils;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;
    using System;

    /// <summary>
    /// Bill pay kit: The API reference for the Bill Pay kit. <br/>
    /// 
    /// <remarks>
    /// <br/>
    /// The bill pay kit is an API and a set of supporting tools designed to integrate a bill pay flow into your app as quickly as possible. It&apos;s ideal for facilitating essential bill payment processes within your SMB&apos;s accounting software.<br/>
    /// <br/>
    /// <a href="https://docs.codat.io/payables/bill-pay-kit">Explore product</a> | <a href="https://github.com/codatio/oas">See OpenAPI spec</a><br/>
    /// <br/>
    /// ---<br/>
    /// &lt;!-- Start Codat Tags Table --&gt;<br/>
    /// ## Endpoints<br/>
    /// <br/>
    /// | Endpoints | Description |<br/>
    /// | :- |:- |<br/>
    /// | Companies | Create and manage your SMB users&apos; companies. |<br/>
    /// | Connections | Create new and manage existing data connections for a company. |<br/>
    /// | Company information | View company profile from the source platform. |<br/>
    /// | Bills | Get, create, and update Bills. |<br/>
    /// | Bill payments | Get, create, and update Bill payments. |<br/>
    /// | Suppliers | Get, create, and update Suppliers. |<br/>
    /// | Bank accounts | Create a bank account for a given company&apos;s connection. |<br/>
    /// &lt;!-- End Codat Tags Table --&gt;
    /// </remarks>
    /// </summary>
    public interface ISDK
    {

        /// <summary>
        /// Create and manage your SMB users&apos; companies.
        /// </summary>
        public ICompanies Companies { get; }

        /// <summary>
        /// Create new and manage existing data connections for a company.
        /// </summary>
        public IConnections Connections { get; }

        /// <summary>
        /// View company profile from the source platform.
        /// </summary>
        public ICompanyInformation CompanyInformation { get; }

        /// <summary>
        /// Get, create, and update Bills.
        /// </summary>
        public IBills Bills { get; }

        /// <summary>
        /// Get, create, and update Bill payments.
        /// </summary>
        public IBillPayments BillPayments { get; }

        /// <summary>
        /// Get, create, and update Suppliers.
        /// </summary>
        public ISuppliers Suppliers { get; }

        /// <summary>
        /// Create a bank account for a given company&apos;s connection.
        /// </summary>
        public IBankAccounts BankAccounts { get; }
    }

    public class SDKConfig
    {
        /// <summary>
        /// List of server URLs available to the SDK.
        /// </summary>
        public static readonly string[] ServerList = {
            "https://api.codat.io",
        };

        public string ServerUrl = "";
        public int ServerIndex = 0;
        public SDKHooks Hooks = new SDKHooks();
        public RetryConfig? RetryConfig = null;

        public string GetTemplatedServerUrl()
        {
            if (!String.IsNullOrEmpty(this.ServerUrl))
            {
                return Utilities.TemplateUrl(Utilities.RemoveSuffix(this.ServerUrl, "/"), new Dictionary<string, string>());
            }
            return Utilities.TemplateUrl(SDKConfig.ServerList[this.ServerIndex], new Dictionary<string, string>());
        }

        public ISpeakeasyHttpClient InitHooks(ISpeakeasyHttpClient client)
        {
            string preHooksUrl = GetTemplatedServerUrl();
            var (postHooksUrl, postHooksClient) = this.Hooks.SDKInit(preHooksUrl, client);
            if (preHooksUrl != postHooksUrl)
            {
                this.ServerUrl = postHooksUrl;
            }
            return postHooksClient;
        }
    }

    /// <summary>
    /// Bill pay kit: The API reference for the Bill Pay kit. <br/>
    /// 
    /// <remarks>
    /// <br/>
    /// The bill pay kit is an API and a set of supporting tools designed to integrate a bill pay flow into your app as quickly as possible. It&apos;s ideal for facilitating essential bill payment processes within your SMB&apos;s accounting software.<br/>
    /// <br/>
    /// <a href="https://docs.codat.io/payables/bill-pay-kit">Explore product</a> | <a href="https://github.com/codatio/oas">See OpenAPI spec</a><br/>
    /// <br/>
    /// ---<br/>
    /// &lt;!-- Start Codat Tags Table --&gt;<br/>
    /// ## Endpoints<br/>
    /// <br/>
    /// | Endpoints | Description |<br/>
    /// | :- |:- |<br/>
    /// | Companies | Create and manage your SMB users&apos; companies. |<br/>
    /// | Connections | Create new and manage existing data connections for a company. |<br/>
    /// | Company information | View company profile from the source platform. |<br/>
    /// | Bills | Get, create, and update Bills. |<br/>
    /// | Bill payments | Get, create, and update Bill payments. |<br/>
    /// | Suppliers | Get, create, and update Suppliers. |<br/>
    /// | Bank accounts | Create a bank account for a given company&apos;s connection. |<br/>
    /// &lt;!-- End Codat Tags Table --&gt;
    /// </remarks>
    /// </summary>
    public class SDK: ISDK
    {
        public SDKConfig SDKConfiguration { get; private set; }

        private const string _language = "csharp";
        private const string _sdkVersion = "0.0.7";
        private const string _sdkGenVersion = "2.411.9";
        private const string _openapiDocVersion = "3.0.0";
        private const string _userAgent = "speakeasy-sdk/csharp 0.0.7 2.411.9 3.0.0 Openapi";
        private string _serverUrl = "";
        private int _serverIndex = 0;
        private ISpeakeasyHttpClient _client;
        private Func<Openapi.Models.Components.Security>? _securitySource;
        public ICompanies Companies { get; private set; }
        public IConnections Connections { get; private set; }
        public ICompanyInformation CompanyInformation { get; private set; }
        public IBills Bills { get; private set; }
        public IBillPayments BillPayments { get; private set; }
        public ISuppliers Suppliers { get; private set; }
        public IBankAccounts BankAccounts { get; private set; }

        public SDK(string? authHeader = null, Func<string>? authHeaderSource = null, int? serverIndex = null, string? serverUrl = null, Dictionary<string, string>? urlParams = null, ISpeakeasyHttpClient? client = null, RetryConfig? retryConfig = null)
        {
            if (serverIndex != null)
            {
                if (serverIndex.Value < 0 || serverIndex.Value >= SDKConfig.ServerList.Length)
                {
                    throw new Exception($"Invalid server index {serverIndex.Value}");
                }
                _serverIndex = serverIndex.Value;
            }

            if (serverUrl != null)
            {
                if (urlParams != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, urlParams);
                }
                _serverUrl = serverUrl;
            }

            _client = client ?? new SpeakeasyHttpClient();

            if(authHeaderSource != null)
            {
                _securitySource = () => new Openapi.Models.Components.Security() { AuthHeader = authHeaderSource() };
            }
            else if(authHeader != null)
            {
                _securitySource = () => new Openapi.Models.Components.Security() { AuthHeader = authHeader };
            }
            else
            {
                throw new Exception("authHeader and authHeaderSource cannot both be null");
            }

            SDKConfiguration = new SDKConfig()
            {
                ServerIndex = _serverIndex,
                ServerUrl = _serverUrl,
                RetryConfig = retryConfig
            };

            _client = SDKConfiguration.InitHooks(_client);


            Companies = new Companies(_client, _securitySource, _serverUrl, SDKConfiguration);


            Connections = new Connections(_client, _securitySource, _serverUrl, SDKConfiguration);


            CompanyInformation = new CompanyInformation(_client, _securitySource, _serverUrl, SDKConfiguration);


            Bills = new Bills(_client, _securitySource, _serverUrl, SDKConfiguration);


            BillPayments = new BillPayments(_client, _securitySource, _serverUrl, SDKConfiguration);


            Suppliers = new Suppliers(_client, _securitySource, _serverUrl, SDKConfiguration);


            BankAccounts = new BankAccounts(_client, _securitySource, _serverUrl, SDKConfiguration);
        }
    }
}